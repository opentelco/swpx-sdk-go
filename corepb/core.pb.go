//
// Copyright (c) 2023. Liero AB
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: core.proto

package corepb

import (
	analysispb "go.opentelco.io/swpx-sdk-go/analysispb"
	devicepb "go.opentelco.io/swpx-sdk-go/devicepb"
	stanzapb "go.opentelco.io/swpx-sdk-go/stanzapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Settings_Channel int32

const (
	Settings_CHANNEL_PRIMARY Settings_Channel = 0
	Settings_SECONDARY       Settings_Channel = 1
)

// Enum value maps for Settings_Channel.
var (
	Settings_Channel_name = map[int32]string{
		0: "CHANNEL_PRIMARY",
		1: "SECONDARY",
	}
	Settings_Channel_value = map[string]int32{
		"CHANNEL_PRIMARY": 0,
		"SECONDARY":       1,
	}
)

func (x Settings_Channel) Enum() *Settings_Channel {
	p := new(Settings_Channel)
	*p = x
	return p
}

func (x Settings_Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[0].Descriptor()
}

func (Settings_Channel) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[0]
}

func (x Settings_Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_Channel.Descriptor instead.
func (Settings_Channel) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1, 0}
}

type Settings_Priority int32

const (
	Settings_DEFAULT Settings_Priority = 0
	Settings_LOW     Settings_Priority = 1
	Settings_MEDIUM  Settings_Priority = 2
	Settings_HIGH    Settings_Priority = 3
	Settings_URGENT  Settings_Priority = 4
)

// Enum value maps for Settings_Priority.
var (
	Settings_Priority_name = map[int32]string{
		0: "DEFAULT",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
		4: "URGENT",
	}
	Settings_Priority_value = map[string]int32{
		"DEFAULT": 0,
		"LOW":     1,
		"MEDIUM":  2,
		"HIGH":    3,
		"URGENT":  4,
	}
)

func (x Settings_Priority) Enum() *Settings_Priority {
	p := new(Settings_Priority)
	*p = x
	return p
}

func (x Settings_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[1].Descriptor()
}

func (Settings_Priority) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[1]
}

func (x Settings_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_Priority.Descriptor instead.
func (Settings_Priority) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1, 1}
}

type Plugin_Type int32

const (
	Plugin_NOT_SET  Plugin_Type = 0
	Plugin_PROVIDER Plugin_Type = 1
	Plugin_RESOURCE Plugin_Type = 2
)

// Enum value maps for Plugin_Type.
var (
	Plugin_Type_name = map[int32]string{
		0: "NOT_SET",
		1: "PROVIDER",
		2: "RESOURCE",
	}
	Plugin_Type_value = map[string]int32{
		"NOT_SET":  0,
		"PROVIDER": 1,
		"RESOURCE": 2,
	}
)

func (x Plugin_Type) Enum() *Plugin_Type {
	p := new(Plugin_Type)
	*p = x
	return p
}

func (x Plugin_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plugin_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_core_proto_enumTypes[2].Descriptor()
}

func (Plugin_Type) Type() protoreflect.EnumType {
	return &file_core_proto_enumTypes[2]
}

func (x Plugin_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plugin_Type.Descriptor instead.
func (Plugin_Type) EnumDescriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{13, 0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty" bson:"message"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty" bson:"code"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Settings for the request
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// provider_plugin is used to locate the provider plugin that should be used to
	// pre-process the request and post-process the response
	ProviderPlugin []string `protobuf:"bytes,1,rep,name=provider_plugin,json=providerPlugin,proto3" json:"provider_plugin,omitempty" bson:"provider_plugin"`
	// what plugin should be used to collect the data from the device
	ResourcePlugin string `protobuf:"bytes,2,opt,name=resource_plugin,json=resourcePlugin,proto3" json:"resource_plugin,omitempty" bson:"resource_plugin"`
	// recreate_index will recreate the index for the resource through snmp
	// this is useful if the index is not correct or if the resource is not
	// parsed correctly, changes of virtual interfaces could cause a change of index
	RecreateIndex bool `protobuf:"varint,3,opt,name=recreate_index,json=recreateIndex,proto3" json:"recreate_index,omitempty" bson:"recreate_index"`
	// timout for the request, after the timeout the request will be aborted server side
	// any request sent down to the network will be skipped as the ttl is set as Deadline on
	// the request
	Timeout *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty" bson:"timeout"`
	// how long should the cache be valid
	CacheTtl *durationpb.Duration `protobuf:"bytes,6,opt,name=cache_ttl,json=cacheTtl,proto3" json:"cache_ttl,omitempty" bson:"cache_ttl"`
	// tq_channel can be used to spread traffic load on different channels
	TqChannel Settings_Channel `protobuf:"varint,7,opt,name=tq_channel,json=tqChannel,proto3,enum=core.Settings_Channel" json:"tq_channel,omitempty" bson:"tq_channel"`
	// priority of the request, the DNC will try to prioritize the requests based on this
	// if it has several requests to process in the queue
	Priority Settings_Priority `protobuf:"varint,9,opt,name=priority,proto3,enum=core.Settings_Priority" json:"priority,omitempty" bson:"priority"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

func (x *Settings) GetProviderPlugin() []string {
	if x != nil {
		return x.ProviderPlugin
	}
	return nil
}

func (x *Settings) GetResourcePlugin() string {
	if x != nil {
		return x.ResourcePlugin
	}
	return ""
}

func (x *Settings) GetRecreateIndex() bool {
	if x != nil {
		return x.RecreateIndex
	}
	return false
}

func (x *Settings) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Settings) GetCacheTtl() *durationpb.Duration {
	if x != nil {
		return x.CacheTtl
	}
	return nil
}

func (x *Settings) GetTqChannel() Settings_Channel {
	if x != nil {
		return x.TqChannel
	}
	return Settings_CHANNEL_PRIMARY
}

func (x *Settings) GetPriority() Settings_Priority {
	if x != nil {
		return x.Priority
	}
	return Settings_DEFAULT
}

// SessionRequest is passed through the plugin system to resolve the hostname and port etc
type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// used to locate the resource by a provider plugin
	// the provider plugin could look up the access_id in the database and populate the hostname and port fields
	// if the access_id is not found the provider plugin should return an error with code 404
	AccessId string `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty" bson:"access_id"`
	// hostname and port are used to locate the resource by a resource plugin
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty" bson:"hostname"`
	// network_region is used to send the request to the right pollers
	// each poller group is separted by network_regions and contacts the network
	// elements in that region.
	NetworkRegion string `protobuf:"bytes,3,opt,name=network_region,json=networkRegion,proto3" json:"network_region,omitempty" bson:"network_region"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

func (x *SessionRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *SessionRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *SessionRequest) GetNetworkRegion() string {
	if x != nil {
		return x.NetworkRegion
	}
	return ""
}

// DiscoverRequest is used to discover a network element
type DiscoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is used to locate the network element
	Session *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	// settings is used to configure the request
	Settings *Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
}

func (x *DiscoverRequest) Reset() {
	*x = DiscoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverRequest) ProtoMessage() {}

func (x *DiscoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverRequest.ProtoReflect.Descriptor instead.
func (*DiscoverRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3}
}

func (x *DiscoverRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *DiscoverRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type DiscoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *devicepb.Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" bson:"device"`
}

func (x *DiscoverResponse) Reset() {
	*x = DiscoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverResponse) ProtoMessage() {}

func (x *DiscoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverResponse.ProtoReflect.Descriptor instead.
func (*DiscoverResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{4}
}

func (x *DiscoverResponse) GetDevice() *devicepb.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

// DiagnosticRequest is used to run a diagnostic on a network element or a specific port on the network element
type RunDiagnosticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is used to locate the network element
	Session *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	// what port to run the diagnostic on
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
	// settings is used to configure the request
	Settings *Settings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	// how many times the diagnostic should fetch data from the network element
	// the number of times will affect the time of the diagnostic as it will wait
	// 10 seconds between each pol, minimum 3 times
	PollTimes *int32 `protobuf:"varint,4,opt,name=poll_times,json=pollTimes,proto3,oneof" json:"poll_times,omitempty" bson:"poll_times"`
	// fingerprint is used to identify the diagnostic, can be a ID or a name
	// for example the subscription_id for the customers subscription
	// if not set the fingerprint will be <region#hostname@port>
	Fingerprint *string `protobuf:"bytes,5,opt,name=fingerprint,proto3,oneof" json:"fingerprint,omitempty" bson:"fingerprint"`
}

func (x *RunDiagnosticRequest) Reset() {
	*x = RunDiagnosticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDiagnosticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDiagnosticRequest) ProtoMessage() {}

func (x *RunDiagnosticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDiagnosticRequest.ProtoReflect.Descriptor instead.
func (*RunDiagnosticRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{5}
}

func (x *RunDiagnosticRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *RunDiagnosticRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *RunDiagnosticRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *RunDiagnosticRequest) GetPollTimes() int32 {
	if x != nil && x.PollTimes != nil {
		return *x.PollTimes
	}
	return 0
}

func (x *RunDiagnosticRequest) GetFingerprint() string {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return ""
}

type RunDiagnosticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the diagnostic that was run
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// number of expecetd analysis to be done
	ExpectedAnalysis int32 `protobuf:"varint,2,opt,name=expected_analysis,json=expectedAnalysis,proto3" json:"expected_analysis,omitempty" bson:"expected_analysis"`
	// expected duration of the diagnostic in seconds
	ExpectedDuration int32 `protobuf:"varint,3,opt,name=expected_duration,json=expectedDuration,proto3" json:"expected_duration,omitempty" bson:"expected_duration"`
}

func (x *RunDiagnosticResponse) Reset() {
	*x = RunDiagnosticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDiagnosticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDiagnosticResponse) ProtoMessage() {}

func (x *RunDiagnosticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDiagnosticResponse.ProtoReflect.Descriptor instead.
func (*RunDiagnosticResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{6}
}

func (x *RunDiagnosticResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunDiagnosticResponse) GetExpectedAnalysis() int32 {
	if x != nil {
		return x.ExpectedAnalysis
	}
	return 0
}

func (x *RunDiagnosticResponse) GetExpectedDuration() int32 {
	if x != nil {
		return x.ExpectedDuration
	}
	return 0
}

// DiagnosticRequest is used to run a diagnostic on a network element or a specific port on the network element
type RunQuickDiagnosticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session is used to locate the network element
	Session *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	// what port to run the diagnostic on
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
	// settings is used to configure the request
	Settings *Settings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	// how many times the diagnostic should fetch data from the network element
	// the number of times will affect the time of the diagnostic as it will wait
	// 10 seconds between each pol, minimum 3 times
	PollTimes *int32 `protobuf:"varint,4,opt,name=poll_times,json=pollTimes,proto3,oneof" json:"poll_times,omitempty" bson:"poll_times"`
	// fingerprint is used to identify the diagnostic, can be a ID or a name
	// for example the subscription_id for the customers subscription
	// if not set the fingerprint will be <region#hostname@port>
	Fingerprint *string `protobuf:"bytes,5,opt,name=fingerprint,proto3,oneof" json:"fingerprint,omitempty" bson:"fingerprint"`
}

func (x *RunQuickDiagnosticRequest) Reset() {
	*x = RunQuickDiagnosticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQuickDiagnosticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQuickDiagnosticRequest) ProtoMessage() {}

func (x *RunQuickDiagnosticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQuickDiagnosticRequest.ProtoReflect.Descriptor instead.
func (*RunQuickDiagnosticRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{7}
}

func (x *RunQuickDiagnosticRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *RunQuickDiagnosticRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *RunQuickDiagnosticRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *RunQuickDiagnosticRequest) GetPollTimes() int32 {
	if x != nil && x.PollTimes != nil {
		return *x.PollTimes
	}
	return 0
}

func (x *RunQuickDiagnosticRequest) GetFingerprint() string {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return ""
}

type RunQuickDiagnosticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the diagnostic that was run
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// number of expecetd analysis to be done
	ExpectedAnalysis int32 `protobuf:"varint,2,opt,name=expected_analysis,json=expectedAnalysis,proto3" json:"expected_analysis,omitempty" bson:"expected_analysis"`
	// expected duration of the diagnostic in seconds
	ExpectedDuration int32 `protobuf:"varint,3,opt,name=expected_duration,json=expectedDuration,proto3" json:"expected_duration,omitempty" bson:"expected_duration"`
}

func (x *RunQuickDiagnosticResponse) Reset() {
	*x = RunQuickDiagnosticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQuickDiagnosticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQuickDiagnosticResponse) ProtoMessage() {}

func (x *RunQuickDiagnosticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQuickDiagnosticResponse.ProtoReflect.Descriptor instead.
func (*RunQuickDiagnosticResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{8}
}

func (x *RunQuickDiagnosticResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunQuickDiagnosticResponse) GetExpectedAnalysis() int32 {
	if x != nil {
		return x.ExpectedAnalysis
	}
	return 0
}

func (x *RunQuickDiagnosticResponse) GetExpectedDuration() int32 {
	if x != nil {
		return x.ExpectedDuration
	}
	return 0
}

type GetDiagnosticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the diagnostic to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (x *GetDiagnosticRequest) Reset() {
	*x = GetDiagnosticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticRequest) ProtoMessage() {}

func (x *GetDiagnosticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosticRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{9}
}

func (x *GetDiagnosticRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListDiagnosticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fingerprint is used to identify the diagnostic, can be a ID or a name
	// for example the subscription_id for the customers subscription
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty" bson:"fingerprint"`
	Limit       int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" bson:"limit"`
}

func (x *ListDiagnosticsRequest) Reset() {
	*x = ListDiagnosticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosticsRequest) ProtoMessage() {}

func (x *ListDiagnosticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosticsRequest.ProtoReflect.Descriptor instead.
func (*ListDiagnosticsRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{10}
}

func (x *ListDiagnosticsRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *ListDiagnosticsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListDiagnosticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the diagnostics that was found
	Diagnostics []*analysispb.Report `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty" bson:"diagnostics"`
	Limit       int64                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" bson:"limit"`
	Total       int64                `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty" bson:"total"`
}

func (x *ListDiagnosticsResponse) Reset() {
	*x = ListDiagnosticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosticsResponse) ProtoMessage() {}

func (x *ListDiagnosticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosticsResponse.ProtoReflect.Descriptor instead.
func (*ListDiagnosticsResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{11}
}

func (x *ListDiagnosticsResponse) GetDiagnostics() []*analysispb.Report {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *ListDiagnosticsResponse) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDiagnosticsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CheckAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if the network element is available or not
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty" bson:"available"`
	// response time in ms
	ResponseTime float32 `protobuf:"fixed32,2,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty" bson:"response_time"`
}

func (x *CheckAvailabilityResponse) Reset() {
	*x = CheckAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAvailabilityResponse) ProtoMessage() {}

func (x *CheckAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*CheckAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{12}
}

func (x *CheckAvailabilityResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CheckAvailabilityResponse) GetResponseTime() float32 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

type Plugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the plugin, should be unique and is used to locate the plugin
	// the name is reported by the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	// version of the plugin reported by the plugin
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" bson:"version"`
	// the type of the plugin, if its a provider or a resource plugin
	Type Plugin_Type `protobuf:"varint,4,opt,name=type,proto3,enum=core.Plugin_Type" json:"type,omitempty" bson:"type"`
}

func (x *Plugin) Reset() {
	*x = Plugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin) ProtoMessage() {}

func (x *Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin.ProtoReflect.Descriptor instead.
func (*Plugin) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{13}
}

func (x *Plugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plugin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Plugin) GetType() Plugin_Type {
	if x != nil {
		return x.Type
	}
	return Plugin_NOT_SET
}

type ListPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the plugins that are available in the system
	Plugins []*Plugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty" bson:"plugins"`
}

func (x *ListPluginsResponse) Reset() {
	*x = ListPluginsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginsResponse) ProtoMessage() {}

func (x *ListPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginsResponse.ProtoReflect.Descriptor instead.
func (*ListPluginsResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{14}
}

func (x *ListPluginsResponse) GetPlugins() []*Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type ListPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the type of the plugins to get
	Type Plugin_Type `protobuf:"varint,1,opt,name=type,proto3,enum=core.Plugin_Type" json:"type,omitempty" bson:"type"`
	Name string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
}

func (x *ListPluginsRequest) Reset() {
	*x = ListPluginsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginsRequest) ProtoMessage() {}

func (x *ListPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginsRequest.ProtoReflect.Descriptor instead.
func (*ListPluginsRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{15}
}

func (x *ListPluginsRequest) GetType() Plugin_Type {
	if x != nil {
		return x.Type
	}
	return Plugin_NOT_SET
}

func (x *ListPluginsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CollectDeviceInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	Settings *Settings       `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
}

func (x *CollectDeviceInformationRequest) Reset() {
	*x = CollectDeviceInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectDeviceInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectDeviceInformationRequest) ProtoMessage() {}

func (x *CollectDeviceInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectDeviceInformationRequest.ProtoReflect.Descriptor instead.
func (*CollectDeviceInformationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{16}
}

func (x *CollectDeviceInformationRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CollectDeviceInformationRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CollectBasicDeviceInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	Settings *Settings       `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
}

func (x *CollectBasicDeviceInformationRequest) Reset() {
	*x = CollectBasicDeviceInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectBasicDeviceInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectBasicDeviceInformationRequest) ProtoMessage() {}

func (x *CollectBasicDeviceInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectBasicDeviceInformationRequest.ProtoReflect.Descriptor instead.
func (*CollectBasicDeviceInformationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{17}
}

func (x *CollectBasicDeviceInformationRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CollectBasicDeviceInformationRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type DeviceInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *devicepb.Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty" bson:"device"`
}

func (x *DeviceInformationResponse) Reset() {
	*x = DeviceInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInformationResponse) ProtoMessage() {}

func (x *DeviceInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInformationResponse.ProtoReflect.Descriptor instead.
func (*DeviceInformationResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceInformationResponse) GetDevice() *devicepb.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type CollectPortInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	Settings *Settings       `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	Port     string          `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
}

func (x *CollectPortInformationRequest) Reset() {
	*x = CollectPortInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPortInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPortInformationRequest) ProtoMessage() {}

func (x *CollectPortInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPortInformationRequest.ProtoReflect.Descriptor instead.
func (*CollectPortInformationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{19}
}

func (x *CollectPortInformationRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CollectPortInformationRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CollectPortInformationRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type CollectBasicPortInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	Settings *Settings       `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	Port     string          `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
}

func (x *CollectBasicPortInformationRequest) Reset() {
	*x = CollectBasicPortInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectBasicPortInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectBasicPortInformationRequest) ProtoMessage() {}

func (x *CollectBasicPortInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectBasicPortInformationRequest.ProtoReflect.Descriptor instead.
func (*CollectBasicPortInformationRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{20}
}

func (x *CollectBasicPortInformationRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CollectBasicPortInformationRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CollectBasicPortInformationRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type PortInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port *devicepb.Port `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
}

func (x *PortInformationResponse) Reset() {
	*x = PortInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortInformationResponse) ProtoMessage() {}

func (x *PortInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortInformationResponse.ProtoReflect.Descriptor instead.
func (*PortInformationResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{21}
}

func (x *PortInformationResponse) GetPort() *devicepb.Port {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigureStanzaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session  *SessionRequest `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
	Settings *Settings       `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	// the configuration to send to the device, each line is a string in the array
	Stanza []*stanzapb.ConfigurationLine `protobuf:"bytes,4,rep,name=stanza,proto3" json:"stanza,omitempty" bson:"stanza"`
}

func (x *ConfigureStanzaRequest) Reset() {
	*x = ConfigureStanzaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureStanzaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureStanzaRequest) ProtoMessage() {}

func (x *ConfigureStanzaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureStanzaRequest.ProtoReflect.Descriptor instead.
func (*ConfigureStanzaRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{22}
}

func (x *ConfigureStanzaRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ConfigureStanzaRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ConfigureStanzaRequest) GetStanza() []*stanzapb.ConfigurationLine {
	if x != nil {
		return x.Stanza
	}
	return nil
}

type CollectConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *Settings       `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	Session  *SessionRequest `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty" bson:"session"`
}

func (x *CollectConfigRequest) Reset() {
	*x = CollectConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectConfigRequest) ProtoMessage() {}

func (x *CollectConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectConfigRequest.ProtoReflect.Descriptor instead.
func (*CollectConfigRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{23}
}

func (x *CollectConfigRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CollectConfigRequest) GetSession() *SessionRequest {
	if x != nil {
		return x.Session
	}
	return nil
}

type ConfigChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" bson:"path"`
	OldValue string `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty" bson:"old_value"`
	NewValue string `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty" bson:"new_value"`
}

func (x *ConfigChange) Reset() {
	*x = ConfigChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigChange) ProtoMessage() {}

func (x *ConfigChange) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigChange.ProtoReflect.Descriptor instead.
func (*ConfigChange) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigChange) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ConfigChange) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *ConfigChange) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

type CollectConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  string          `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty" bson:"config"`
	Changes []*ConfigChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty" bson:"changes"`
	Error   *Error          `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty" bson:"error"`
}

func (x *CollectConfigResponse) Reset() {
	*x = CollectConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectConfigResponse) ProtoMessage() {}

func (x *CollectConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectConfigResponse.ProtoReflect.Descriptor instead.
func (*CollectConfigResponse) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{25}
}

func (x *CollectConfigResponse) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *CollectConfigResponse) GetChanges() []*ConfigChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CollectConfigResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// IndexCacheItem is used to cache the index of a port on a network element
// to avoid having to recreate the index for each request to the network element
// the index is used to locate the port on the network element and is unique for each port
type IndexCacheItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         *devicepb.PortIndexEntity `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty" bson:"index"`
	Hostname      string                    `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty" bson:"hostname"`
	NetworkRegion string                    `protobuf:"bytes,3,opt,name=network_region,json=networkRegion,proto3" json:"network_region,omitempty" bson:"network_region"`
	Created       *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty" bson:"created"`
}

func (x *IndexCacheItem) Reset() {
	*x = IndexCacheItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexCacheItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexCacheItem) ProtoMessage() {}

func (x *IndexCacheItem) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexCacheItem.ProtoReflect.Descriptor instead.
func (*IndexCacheItem) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{26}
}

func (x *IndexCacheItem) GetIndex() *devicepb.PortIndexEntity {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *IndexCacheItem) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *IndexCacheItem) GetNetworkRegion() string {
	if x != nil {
		return x.NetworkRegion
	}
	return ""
}

func (x *IndexCacheItem) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// used in the index cache to get the index of a port on a network element
type IndexSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname of the device
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty" bson:"hostname"`
	// name of the port, for example "GigabitEthernet1/0/1"
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
	// the region the device belongs to, the index is unique for each region
	NetworkRegion string `protobuf:"bytes,3,opt,name=network_region,json=networkRegion,proto3" json:"network_region,omitempty" bson:"network_region"`
	// how old index we are willing to accept in the search
	From *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=from,proto3,oneof" json:"from,omitempty" bson:"from"`
}

func (x *IndexSearchRequest) Reset() {
	*x = IndexSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSearchRequest) ProtoMessage() {}

func (x *IndexSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSearchRequest.ProtoReflect.Descriptor instead.
func (*IndexSearchRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{27}
}

func (x *IndexSearchRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *IndexSearchRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *IndexSearchRequest) GetNetworkRegion() string {
	if x != nil {
		return x.NetworkRegion
	}
	return ""
}

func (x *IndexSearchRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

// used in the index cache to delete a index
type IndexDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname      string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty" bson:"hostname"`
	Port          string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
	NetworkRegion string `protobuf:"bytes,3,opt,name=network_region,json=networkRegion,proto3" json:"network_region,omitempty" bson:"network_region"`
}

func (x *IndexDeleteRequest) Reset() {
	*x = IndexDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDeleteRequest) ProtoMessage() {}

func (x *IndexDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDeleteRequest.ProtoReflect.Descriptor instead.
func (*IndexDeleteRequest) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{28}
}

func (x *IndexDeleteRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *IndexDeleteRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *IndexDeleteRequest) GetNetworkRegion() string {
	if x != nil {
		return x.NetworkRegion
	}
	return ""
}

var File_core_proto protoreflect.FileDescriptor

var file_core_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54, 0x74, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x71, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x09, 0x74, 0x71, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x2d, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x22, 0x42, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x70, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x0f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f,
	0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x52, 0x75, 0x6e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a,
	0x19, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6f,
	0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x79, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x02, 0x22, 0x3d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x1f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x1d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3b, 0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x22, 0x72, 0x0a, 0x14,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x5c, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x6b, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x46, 0x0a, 0x07, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xbf, 0x02,
	0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a,
	0x0d, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1a,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1f, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xf1, 0x04, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x57, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x6e, 0x7a, 0x61, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x27,
	0x67, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x2e, 0x69, 0x6f, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x77, 0x70, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_proto_rawDescOnce sync.Once
	file_core_proto_rawDescData = file_core_proto_rawDesc
)

func file_core_proto_rawDescGZIP() []byte {
	file_core_proto_rawDescOnce.Do(func() {
		file_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_proto_rawDescData)
	})
	return file_core_proto_rawDescData
}

var file_core_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_core_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_core_proto_goTypes = []interface{}{
	(Settings_Channel)(0),                        // 0: core.Settings.Channel
	(Settings_Priority)(0),                       // 1: core.Settings.Priority
	(Plugin_Type)(0),                             // 2: core.Plugin.Type
	(*Error)(nil),                                // 3: core.Error
	(*Settings)(nil),                             // 4: core.Settings
	(*SessionRequest)(nil),                       // 5: core.SessionRequest
	(*DiscoverRequest)(nil),                      // 6: core.DiscoverRequest
	(*DiscoverResponse)(nil),                     // 7: core.DiscoverResponse
	(*RunDiagnosticRequest)(nil),                 // 8: core.RunDiagnosticRequest
	(*RunDiagnosticResponse)(nil),                // 9: core.RunDiagnosticResponse
	(*RunQuickDiagnosticRequest)(nil),            // 10: core.RunQuickDiagnosticRequest
	(*RunQuickDiagnosticResponse)(nil),           // 11: core.RunQuickDiagnosticResponse
	(*GetDiagnosticRequest)(nil),                 // 12: core.GetDiagnosticRequest
	(*ListDiagnosticsRequest)(nil),               // 13: core.ListDiagnosticsRequest
	(*ListDiagnosticsResponse)(nil),              // 14: core.ListDiagnosticsResponse
	(*CheckAvailabilityResponse)(nil),            // 15: core.CheckAvailabilityResponse
	(*Plugin)(nil),                               // 16: core.Plugin
	(*ListPluginsResponse)(nil),                  // 17: core.ListPluginsResponse
	(*ListPluginsRequest)(nil),                   // 18: core.ListPluginsRequest
	(*CollectDeviceInformationRequest)(nil),      // 19: core.CollectDeviceInformationRequest
	(*CollectBasicDeviceInformationRequest)(nil), // 20: core.CollectBasicDeviceInformationRequest
	(*DeviceInformationResponse)(nil),            // 21: core.DeviceInformationResponse
	(*CollectPortInformationRequest)(nil),        // 22: core.CollectPortInformationRequest
	(*CollectBasicPortInformationRequest)(nil),   // 23: core.CollectBasicPortInformationRequest
	(*PortInformationResponse)(nil),              // 24: core.PortInformationResponse
	(*ConfigureStanzaRequest)(nil),               // 25: core.ConfigureStanzaRequest
	(*CollectConfigRequest)(nil),                 // 26: core.CollectConfigRequest
	(*ConfigChange)(nil),                         // 27: core.ConfigChange
	(*CollectConfigResponse)(nil),                // 28: core.CollectConfigResponse
	(*IndexCacheItem)(nil),                       // 29: core.IndexCacheItem
	(*IndexSearchRequest)(nil),                   // 30: core.IndexSearchRequest
	(*IndexDeleteRequest)(nil),                   // 31: core.IndexDeleteRequest
	(*durationpb.Duration)(nil),                  // 32: google.protobuf.Duration
	(*devicepb.Device)(nil),                      // 33: device.Device
	(*analysispb.Report)(nil),                    // 34: analysis.Report
	(*devicepb.Port)(nil),                        // 35: device.Port
	(*stanzapb.ConfigurationLine)(nil),           // 36: stanza.ConfigurationLine
	(*devicepb.PortIndexEntity)(nil),             // 37: device.PortIndexEntity
	(*timestamppb.Timestamp)(nil),                // 38: google.protobuf.Timestamp
	(*stanzapb.ConfigureResponse)(nil),           // 39: stanza.ConfigureResponse
}
var file_core_proto_depIdxs = []int32{
	32, // 0: core.Settings.timeout:type_name -> google.protobuf.Duration
	32, // 1: core.Settings.cache_ttl:type_name -> google.protobuf.Duration
	0,  // 2: core.Settings.tq_channel:type_name -> core.Settings.Channel
	1,  // 3: core.Settings.priority:type_name -> core.Settings.Priority
	5,  // 4: core.DiscoverRequest.session:type_name -> core.SessionRequest
	4,  // 5: core.DiscoverRequest.settings:type_name -> core.Settings
	33, // 6: core.DiscoverResponse.device:type_name -> device.Device
	5,  // 7: core.RunDiagnosticRequest.session:type_name -> core.SessionRequest
	4,  // 8: core.RunDiagnosticRequest.settings:type_name -> core.Settings
	5,  // 9: core.RunQuickDiagnosticRequest.session:type_name -> core.SessionRequest
	4,  // 10: core.RunQuickDiagnosticRequest.settings:type_name -> core.Settings
	34, // 11: core.ListDiagnosticsResponse.diagnostics:type_name -> analysis.Report
	2,  // 12: core.Plugin.type:type_name -> core.Plugin.Type
	16, // 13: core.ListPluginsResponse.plugins:type_name -> core.Plugin
	2,  // 14: core.ListPluginsRequest.type:type_name -> core.Plugin.Type
	5,  // 15: core.CollectDeviceInformationRequest.session:type_name -> core.SessionRequest
	4,  // 16: core.CollectDeviceInformationRequest.settings:type_name -> core.Settings
	5,  // 17: core.CollectBasicDeviceInformationRequest.session:type_name -> core.SessionRequest
	4,  // 18: core.CollectBasicDeviceInformationRequest.settings:type_name -> core.Settings
	33, // 19: core.DeviceInformationResponse.device:type_name -> device.Device
	5,  // 20: core.CollectPortInformationRequest.session:type_name -> core.SessionRequest
	4,  // 21: core.CollectPortInformationRequest.settings:type_name -> core.Settings
	5,  // 22: core.CollectBasicPortInformationRequest.session:type_name -> core.SessionRequest
	4,  // 23: core.CollectBasicPortInformationRequest.settings:type_name -> core.Settings
	35, // 24: core.PortInformationResponse.port:type_name -> device.Port
	5,  // 25: core.ConfigureStanzaRequest.session:type_name -> core.SessionRequest
	4,  // 26: core.ConfigureStanzaRequest.settings:type_name -> core.Settings
	36, // 27: core.ConfigureStanzaRequest.stanza:type_name -> stanza.ConfigurationLine
	4,  // 28: core.CollectConfigRequest.settings:type_name -> core.Settings
	5,  // 29: core.CollectConfigRequest.session:type_name -> core.SessionRequest
	27, // 30: core.CollectConfigResponse.changes:type_name -> core.ConfigChange
	3,  // 31: core.CollectConfigResponse.error:type_name -> core.Error
	37, // 32: core.IndexCacheItem.index:type_name -> device.PortIndexEntity
	38, // 33: core.IndexCacheItem.created:type_name -> google.protobuf.Timestamp
	38, // 34: core.IndexSearchRequest.from:type_name -> google.protobuf.Timestamp
	18, // 35: core.Plugins.List:input_type -> core.ListPluginsRequest
	8,  // 36: core.Diagnostics.RunDiagnostic:input_type -> core.RunDiagnosticRequest
	10, // 37: core.Diagnostics.RunQuickDiagnostic:input_type -> core.RunQuickDiagnosticRequest
	12, // 38: core.Diagnostics.GetDiagnostic:input_type -> core.GetDiagnosticRequest
	13, // 39: core.Diagnostics.ListDiagnostics:input_type -> core.ListDiagnosticsRequest
	6,  // 40: core.Poller.Discover:input_type -> core.DiscoverRequest
	5,  // 41: core.Poller.CheckAvailability:input_type -> core.SessionRequest
	19, // 42: core.Poller.CollectDeviceInformation:input_type -> core.CollectDeviceInformationRequest
	20, // 43: core.Poller.CollectBasicDeviceInformation:input_type -> core.CollectBasicDeviceInformationRequest
	22, // 44: core.Poller.CollectPortInformation:input_type -> core.CollectPortInformationRequest
	23, // 45: core.Poller.CollectBasicPortInformation:input_type -> core.CollectBasicPortInformationRequest
	26, // 46: core.Poller.CollectConfig:input_type -> core.CollectConfigRequest
	25, // 47: core.Commander.ConfigureStanza:input_type -> core.ConfigureStanzaRequest
	17, // 48: core.Plugins.List:output_type -> core.ListPluginsResponse
	9,  // 49: core.Diagnostics.RunDiagnostic:output_type -> core.RunDiagnosticResponse
	11, // 50: core.Diagnostics.RunQuickDiagnostic:output_type -> core.RunQuickDiagnosticResponse
	34, // 51: core.Diagnostics.GetDiagnostic:output_type -> analysis.Report
	14, // 52: core.Diagnostics.ListDiagnostics:output_type -> core.ListDiagnosticsResponse
	7,  // 53: core.Poller.Discover:output_type -> core.DiscoverResponse
	15, // 54: core.Poller.CheckAvailability:output_type -> core.CheckAvailabilityResponse
	21, // 55: core.Poller.CollectDeviceInformation:output_type -> core.DeviceInformationResponse
	21, // 56: core.Poller.CollectBasicDeviceInformation:output_type -> core.DeviceInformationResponse
	24, // 57: core.Poller.CollectPortInformation:output_type -> core.PortInformationResponse
	24, // 58: core.Poller.CollectBasicPortInformation:output_type -> core.PortInformationResponse
	28, // 59: core.Poller.CollectConfig:output_type -> core.CollectConfigResponse
	39, // 60: core.Commander.ConfigureStanza:output_type -> stanza.ConfigureResponse
	48, // [48:61] is the sub-list for method output_type
	35, // [35:48] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_core_proto_init() }
func file_core_proto_init() {
	if File_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDiagnosticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDiagnosticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQuickDiagnosticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQuickDiagnosticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPluginsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPluginsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectDeviceInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectBasicDeviceInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectPortInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectBasicPortInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureStanzaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexCacheItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_core_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_core_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_core_proto_goTypes,
		DependencyIndexes: file_core_proto_depIdxs,
		EnumInfos:         file_core_proto_enumTypes,
		MessageInfos:      file_core_proto_msgTypes,
	}.Build()
	File_core_proto = out.File
	file_core_proto_rawDesc = nil
	file_core_proto_goTypes = nil
	file_core_proto_depIdxs = nil
}
