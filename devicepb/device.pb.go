//
// Copyright (c) 2023. Liero AB
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: device.proto

package devicepb

import (
	trafficpolicypb "go.opentelco.io/swpx-sdk-go/trafficpolicypb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device_Type int32

const (
	Device_TYPE_UNSET     Device_Type = 0
	Device_TYPE_DEVICE    Device_Type = 1
	Device_TYPE_CHASSIS   Device_Type = 2
	Device_TYPE_VIRTUAL   Device_Type = 3
	Device_TYPE_POWER     Device_Type = 4
	Device_TYPE_FAN       Device_Type = 5
	Device_TYPE_INTERFACE Device_Type = 6
)

// Enum value maps for Device_Type.
var (
	Device_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "TYPE_DEVICE",
		2: "TYPE_CHASSIS",
		3: "TYPE_VIRTUAL",
		4: "TYPE_POWER",
		5: "TYPE_FAN",
		6: "TYPE_INTERFACE",
	}
	Device_Type_value = map[string]int32{
		"TYPE_UNSET":     0,
		"TYPE_DEVICE":    1,
		"TYPE_CHASSIS":   2,
		"TYPE_VIRTUAL":   3,
		"TYPE_POWER":     4,
		"TYPE_FAN":       5,
		"TYPE_INTERFACE": 6,
	}
)

func (x Device_Type) Enum() *Device_Type {
	p := new(Device_Type)
	*p = x
	return p
}

func (x Device_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_device_proto_enumTypes[0].Descriptor()
}

func (Device_Type) Type() protoreflect.EnumType {
	return &file_device_proto_enumTypes[0]
}

func (x Device_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Type.Descriptor instead.
func (Device_Type) EnumDescriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{0, 0}
}

type Device_StackRole int32

const (
	Device_STACK_ROLE_UNKNOWN Device_StackRole = 0
	Device_STACK_ROLE_MASTER  Device_StackRole = 1
	Device_STACK_ROLE_STANDBY Device_StackRole = 2
	Device_STACK_ROLE_SLAVE   Device_StackRole = 3
)

// Enum value maps for Device_StackRole.
var (
	Device_StackRole_name = map[int32]string{
		0: "STACK_ROLE_UNKNOWN",
		1: "STACK_ROLE_MASTER",
		2: "STACK_ROLE_STANDBY",
		3: "STACK_ROLE_SLAVE",
	}
	Device_StackRole_value = map[string]int32{
		"STACK_ROLE_UNKNOWN": 0,
		"STACK_ROLE_MASTER":  1,
		"STACK_ROLE_STANDBY": 2,
		"STACK_ROLE_SLAVE":   3,
	}
)

func (x Device_StackRole) Enum() *Device_StackRole {
	p := new(Device_StackRole)
	*p = x
	return p
}

func (x Device_StackRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_StackRole) Descriptor() protoreflect.EnumDescriptor {
	return file_device_proto_enumTypes[1].Descriptor()
}

func (Device_StackRole) Type() protoreflect.EnumType {
	return &file_device_proto_enumTypes[1]
}

func (x Device_StackRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_StackRole.Descriptor instead.
func (Device_StackRole) EnumDescriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{0, 1}
}

// types from the SNMP IF-MIB
type Port_Type int32

const (
	Port_TYPE_UNSET                    Port_Type = 0
	Port_other                         Port_Type = 1
	Port_regular1822                   Port_Type = 2
	Port_hdh1822                       Port_Type = 3
	Port_ddnX25                        Port_Type = 4
	Port_rfc877x25                     Port_Type = 5
	Port_ethernetCsmacd                Port_Type = 6
	Port_iso88023Csmacd                Port_Type = 7
	Port_iso88024TokenBus              Port_Type = 8
	Port_iso88025TokenRing             Port_Type = 9
	Port_iso88026Man                   Port_Type = 10
	Port_starLan                       Port_Type = 11
	Port_proteon10Mbit                 Port_Type = 12
	Port_proteon80Mbit                 Port_Type = 13
	Port_hyperchannel                  Port_Type = 14
	Port_fddi                          Port_Type = 15
	Port_lapb                          Port_Type = 16
	Port_sdlc                          Port_Type = 17
	Port_ds1                           Port_Type = 18
	Port_e1                            Port_Type = 19
	Port_basicISDN                     Port_Type = 20
	Port_primaryISDN                   Port_Type = 21
	Port_propPointToPointSerial        Port_Type = 22
	Port_ppp                           Port_Type = 23
	Port_softwareLoopback              Port_Type = 24
	Port_eon                           Port_Type = 25
	Port_ethernet3Mbit                 Port_Type = 26
	Port_nsip                          Port_Type = 27
	Port_slip                          Port_Type = 28
	Port_ultra                         Port_Type = 29
	Port_ds3                           Port_Type = 30
	Port_sip                           Port_Type = 31
	Port_frameRelay                    Port_Type = 32
	Port_rs232                         Port_Type = 33
	Port_para                          Port_Type = 34
	Port_arcnet                        Port_Type = 35
	Port_arcnetPlus                    Port_Type = 36
	Port_atm                           Port_Type = 37
	Port_miox25                        Port_Type = 38
	Port_sonet                         Port_Type = 39
	Port_x25ple                        Port_Type = 40
	Port_iso88022llc                   Port_Type = 41
	Port_localTalk                     Port_Type = 42
	Port_smdsDxi                       Port_Type = 43
	Port_frameRelayService             Port_Type = 44
	Port_v35                           Port_Type = 45
	Port_hssi                          Port_Type = 46
	Port_hippi                         Port_Type = 47
	Port_modem                         Port_Type = 48
	Port_aal5                          Port_Type = 49
	Port_sonetPath                     Port_Type = 50
	Port_sonetVT                       Port_Type = 51
	Port_smdsIcip                      Port_Type = 52
	Port_propVirtual                   Port_Type = 53
	Port_propMultiplexor               Port_Type = 54
	Port_ieee80212                     Port_Type = 55
	Port_fibreChannel                  Port_Type = 56
	Port_hippiInterface                Port_Type = 57
	Port_frameRelayInterconnect        Port_Type = 58
	Port_aflane8023                    Port_Type = 59
	Port_aflane8025                    Port_Type = 60
	Port_cctEmul                       Port_Type = 61
	Port_fastEther                     Port_Type = 62
	Port_isdn                          Port_Type = 63
	Port_v11                           Port_Type = 64
	Port_v36                           Port_Type = 65
	Port_g703at64k                     Port_Type = 66
	Port_g703at2mb                     Port_Type = 67
	Port_qllc                          Port_Type = 68
	Port_fastEtherFX                   Port_Type = 69
	Port_channel                       Port_Type = 70
	Port_ieee80211                     Port_Type = 71
	Port_ibm370parChan                 Port_Type = 72
	Port_escon                         Port_Type = 73
	Port_dlsw                          Port_Type = 74
	Port_isdns                         Port_Type = 75
	Port_isdnu                         Port_Type = 76
	Port_lapd                          Port_Type = 77
	Port_ipSwitch                      Port_Type = 78
	Port_rsrb                          Port_Type = 79
	Port_atmLogical                    Port_Type = 80
	Port_ds0                           Port_Type = 81
	Port_ds0Bundle                     Port_Type = 82
	Port_bsc                           Port_Type = 83
	Port_async                         Port_Type = 84
	Port_cnr                           Port_Type = 85
	Port_iso88025Dtr                   Port_Type = 86
	Port_eplrs                         Port_Type = 87
	Port_arap                          Port_Type = 88
	Port_propCnls                      Port_Type = 89
	Port_hostPad                       Port_Type = 90
	Port_termPad                       Port_Type = 91
	Port_frameRelayMPI                 Port_Type = 92
	Port_x213                          Port_Type = 93
	Port_adsl                          Port_Type = 94
	Port_radsl                         Port_Type = 95
	Port_sdsl                          Port_Type = 96
	Port_vdsl                          Port_Type = 97
	Port_iso88025CRFPInt               Port_Type = 98
	Port_myrinet                       Port_Type = 99
	Port_voiceEM                       Port_Type = 100
	Port_voiceFXO                      Port_Type = 101
	Port_voiceFXS                      Port_Type = 102
	Port_voiceEncap                    Port_Type = 103
	Port_voiceOverIp                   Port_Type = 104
	Port_atmDxi                        Port_Type = 105
	Port_atmFuni                       Port_Type = 106
	Port_atmIma                        Port_Type = 107
	Port_pppMultilinkBundle            Port_Type = 108
	Port_ipOverCdlc                    Port_Type = 109
	Port_ipOverClaw                    Port_Type = 110
	Port_stackToStack                  Port_Type = 111
	Port_virtualIpAddress              Port_Type = 112
	Port_mpc                           Port_Type = 113
	Port_ipOverAtm                     Port_Type = 114
	Port_iso88025Fiber                 Port_Type = 115
	Port_tdlc                          Port_Type = 116
	Port_gigabitEthernet               Port_Type = 117
	Port_hdlc                          Port_Type = 118
	Port_lapf                          Port_Type = 119
	Port_v37                           Port_Type = 120
	Port_x25mlp                        Port_Type = 121
	Port_x25huntGroup                  Port_Type = 122
	Port_transpHdlc                    Port_Type = 123
	Port_interleave                    Port_Type = 124
	Port_fast                          Port_Type = 125
	Port_ip                            Port_Type = 126
	Port_docsCableMaclayer             Port_Type = 127
	Port_docsCableDownstream           Port_Type = 128
	Port_docsCableUpstream             Port_Type = 129
	Port_a12MppSwitch                  Port_Type = 130
	Port_tunnel                        Port_Type = 131
	Port_coffee                        Port_Type = 132
	Port_ces                           Port_Type = 133
	Port_atmSubInterface               Port_Type = 134
	Port_l2vlan                        Port_Type = 135
	Port_l3ipvlan                      Port_Type = 136
	Port_l3ipxvlan                     Port_Type = 137
	Port_digitalPowerline              Port_Type = 138
	Port_mediaMailOverIp               Port_Type = 139
	Port_dtm                           Port_Type = 140
	Port_dcn                           Port_Type = 141
	Port_ipForward                     Port_Type = 142
	Port_msdsl                         Port_Type = 143
	Port_ieee1394                      Port_Type = 144
	Port_if_gsn                        Port_Type = 145
	Port_dvbRccMacLayer                Port_Type = 146
	Port_dvbRccDownstream              Port_Type = 147
	Port_dvbRccUpstream                Port_Type = 148
	Port_atmVirtual                    Port_Type = 149
	Port_mplsTunnel                    Port_Type = 150
	Port_srp                           Port_Type = 151
	Port_voiceOverAtm                  Port_Type = 152
	Port_voiceOverFrameRelay           Port_Type = 153
	Port_idsl                          Port_Type = 154
	Port_compositeLink                 Port_Type = 155
	Port_ss7SigLink                    Port_Type = 156
	Port_propWirelessP2P               Port_Type = 157
	Port_frForward                     Port_Type = 158
	Port_rfc1483                       Port_Type = 159
	Port_usb                           Port_Type = 160
	Port_ieee8023adLag                 Port_Type = 161
	Port_bgppolicyaccounting           Port_Type = 162
	Port_frf16MfrBundle                Port_Type = 163
	Port_h323Gatekeeper                Port_Type = 164
	Port_h323Proxy                     Port_Type = 165
	Port_mpls                          Port_Type = 166
	Port_mfSigLink                     Port_Type = 167
	Port_hdsl2                         Port_Type = 168
	Port_shdsl                         Port_Type = 169
	Port_ds1FDL                        Port_Type = 170
	Port_pos                           Port_Type = 171
	Port_dvbAsiIn                      Port_Type = 172
	Port_dvbAsiOut                     Port_Type = 173
	Port_plc                           Port_Type = 174
	Port_nfas                          Port_Type = 175
	Port_tr008                         Port_Type = 176
	Port_gr303RDT                      Port_Type = 177
	Port_gr303IDT                      Port_Type = 178
	Port_isup                          Port_Type = 179
	Port_propDocsWirelessMaclayer      Port_Type = 180
	Port_propDocsWirelessDownstream    Port_Type = 181
	Port_propDocsWirelessUpstream      Port_Type = 182
	Port_hiperlan2                     Port_Type = 183
	Port_propBWAp2Mp                   Port_Type = 184
	Port_sonetOverheadChannel          Port_Type = 185
	Port_digitalWrapperOverheadChannel Port_Type = 186
	Port_aal2                          Port_Type = 187
	Port_radioMAC                      Port_Type = 188
	Port_atmRadio                      Port_Type = 189
	Port_imt                           Port_Type = 190
	Port_mvl                           Port_Type = 191
	Port_reachDSL                      Port_Type = 192
	Port_frDlciEndPt                   Port_Type = 193
	Port_atmVciEndPt                   Port_Type = 194
	Port_opticalChannel                Port_Type = 195
	Port_opticalTransport              Port_Type = 196
	Port_propAtm                       Port_Type = 197
	Port_voiceOverCable                Port_Type = 198
	Port_infiniband                    Port_Type = 199
	Port_teLink                        Port_Type = 200
	Port_q2931                         Port_Type = 201
	Port_virtualTg                     Port_Type = 202
	Port_sipTg                         Port_Type = 203
	Port_sipSig                        Port_Type = 204
	Port_docsCableUpstreamChannel      Port_Type = 205
	Port_econet                        Port_Type = 206
	Port_pon155                        Port_Type = 207
	Port_pon622                        Port_Type = 208
	Port_bridge                        Port_Type = 209
	Port_linegroup                     Port_Type = 210
	Port_voiceEMFGD                    Port_Type = 211
	Port_voiceFGDEANA                  Port_Type = 212
	Port_voiceDID                      Port_Type = 213
	Port_mpegTransport                 Port_Type = 214
	Port_sixToFour                     Port_Type = 215
	Port_gtp                           Port_Type = 216
	Port_pdnEtherLoop1                 Port_Type = 217
	Port_pdnEtherLoop2                 Port_Type = 218
	Port_opticalChannelGroup           Port_Type = 219
	Port_homepna                       Port_Type = 220
	Port_gfp                           Port_Type = 221
	Port_ciscoISLvlan                  Port_Type = 222
	Port_actelisMetaLOOP               Port_Type = 223
	Port_fcipLink                      Port_Type = 224
	Port_rpr                           Port_Type = 225
	Port_qam                           Port_Type = 226
	Port_lmp                           Port_Type = 227
	Port_cblVectaStar                  Port_Type = 228
	Port_docsCableMCmtsDownstream      Port_Type = 229
	Port_adsl2                         Port_Type = 230
	Port_macSecControlledIF            Port_Type = 231
	Port_macSecUncontrolledIF          Port_Type = 232
	Port_aviciOpticalEther             Port_Type = 233
	Port_atmbond                       Port_Type = 234
	Port_voiceFGDOS                    Port_Type = 235
	Port_mocaVersion1                  Port_Type = 236
	Port_ieee80216WMAN                 Port_Type = 237
	Port_adsl2plus                     Port_Type = 238
	Port_dvbRcsMacLayer                Port_Type = 239
	Port_dvbTdm                        Port_Type = 240
	Port_dvbRcsTdma                    Port_Type = 241
	Port_x86Laps                       Port_Type = 242
	Port_wwanPP                        Port_Type = 243
	Port_wwanPP2                       Port_Type = 244
	Port_voiceEBS                      Port_Type = 245
	Port_ifPwType                      Port_Type = 246
	Port_ilan                          Port_Type = 247
	Port_pip                           Port_Type = 248
	Port_aluELP                        Port_Type = 249
	Port_gpon                          Port_Type = 250
	Port_vdsl2                         Port_Type = 251
	Port_capwapDot11Profile            Port_Type = 252
	Port_capwapDot11Bss                Port_Type = 253
	Port_capwapWtpVirtualRadio         Port_Type = 254
	Port_bits                          Port_Type = 255
	Port_docsCableUpstreamRfPort       Port_Type = 256
	Port_cableDownstreamRfPort         Port_Type = 257
	Port_vmwareVirtualNic              Port_Type = 258
	Port_ieee802154                    Port_Type = 259
	Port_otnOdu                        Port_Type = 260
	Port_otnOtu                        Port_Type = 261
	Port_ifVfiType                     Port_Type = 262
	Port_g9981                         Port_Type = 263
	Port_g9982                         Port_Type = 264
	Port_g9983                         Port_Type = 265
	Port_aluEpon                       Port_Type = 266
	Port_aluEponOnu                    Port_Type = 267
	Port_aluEponPhysicalUni            Port_Type = 268
	Port_aluEponLogicalLink            Port_Type = 269
	Port_aluGponOnu                    Port_Type = 270
	Port_aluGponPhysicalUni            Port_Type = 271
	Port_vmwareNicTeam                 Port_Type = 272
)

// Enum value maps for Port_Type.
var (
	Port_Type_name = map[int32]string{
		0:   "TYPE_UNSET",
		1:   "other",
		2:   "regular1822",
		3:   "hdh1822",
		4:   "ddnX25",
		5:   "rfc877x25",
		6:   "ethernetCsmacd",
		7:   "iso88023Csmacd",
		8:   "iso88024TokenBus",
		9:   "iso88025TokenRing",
		10:  "iso88026Man",
		11:  "starLan",
		12:  "proteon10Mbit",
		13:  "proteon80Mbit",
		14:  "hyperchannel",
		15:  "fddi",
		16:  "lapb",
		17:  "sdlc",
		18:  "ds1",
		19:  "e1",
		20:  "basicISDN",
		21:  "primaryISDN",
		22:  "propPointToPointSerial",
		23:  "ppp",
		24:  "softwareLoopback",
		25:  "eon",
		26:  "ethernet3Mbit",
		27:  "nsip",
		28:  "slip",
		29:  "ultra",
		30:  "ds3",
		31:  "sip",
		32:  "frameRelay",
		33:  "rs232",
		34:  "para",
		35:  "arcnet",
		36:  "arcnetPlus",
		37:  "atm",
		38:  "miox25",
		39:  "sonet",
		40:  "x25ple",
		41:  "iso88022llc",
		42:  "localTalk",
		43:  "smdsDxi",
		44:  "frameRelayService",
		45:  "v35",
		46:  "hssi",
		47:  "hippi",
		48:  "modem",
		49:  "aal5",
		50:  "sonetPath",
		51:  "sonetVT",
		52:  "smdsIcip",
		53:  "propVirtual",
		54:  "propMultiplexor",
		55:  "ieee80212",
		56:  "fibreChannel",
		57:  "hippiInterface",
		58:  "frameRelayInterconnect",
		59:  "aflane8023",
		60:  "aflane8025",
		61:  "cctEmul",
		62:  "fastEther",
		63:  "isdn",
		64:  "v11",
		65:  "v36",
		66:  "g703at64k",
		67:  "g703at2mb",
		68:  "qllc",
		69:  "fastEtherFX",
		70:  "channel",
		71:  "ieee80211",
		72:  "ibm370parChan",
		73:  "escon",
		74:  "dlsw",
		75:  "isdns",
		76:  "isdnu",
		77:  "lapd",
		78:  "ipSwitch",
		79:  "rsrb",
		80:  "atmLogical",
		81:  "ds0",
		82:  "ds0Bundle",
		83:  "bsc",
		84:  "async",
		85:  "cnr",
		86:  "iso88025Dtr",
		87:  "eplrs",
		88:  "arap",
		89:  "propCnls",
		90:  "hostPad",
		91:  "termPad",
		92:  "frameRelayMPI",
		93:  "x213",
		94:  "adsl",
		95:  "radsl",
		96:  "sdsl",
		97:  "vdsl",
		98:  "iso88025CRFPInt",
		99:  "myrinet",
		100: "voiceEM",
		101: "voiceFXO",
		102: "voiceFXS",
		103: "voiceEncap",
		104: "voiceOverIp",
		105: "atmDxi",
		106: "atmFuni",
		107: "atmIma",
		108: "pppMultilinkBundle",
		109: "ipOverCdlc",
		110: "ipOverClaw",
		111: "stackToStack",
		112: "virtualIpAddress",
		113: "mpc",
		114: "ipOverAtm",
		115: "iso88025Fiber",
		116: "tdlc",
		117: "gigabitEthernet",
		118: "hdlc",
		119: "lapf",
		120: "v37",
		121: "x25mlp",
		122: "x25huntGroup",
		123: "transpHdlc",
		124: "interleave",
		125: "fast",
		126: "ip",
		127: "docsCableMaclayer",
		128: "docsCableDownstream",
		129: "docsCableUpstream",
		130: "a12MppSwitch",
		131: "tunnel",
		132: "coffee",
		133: "ces",
		134: "atmSubInterface",
		135: "l2vlan",
		136: "l3ipvlan",
		137: "l3ipxvlan",
		138: "digitalPowerline",
		139: "mediaMailOverIp",
		140: "dtm",
		141: "dcn",
		142: "ipForward",
		143: "msdsl",
		144: "ieee1394",
		145: "if_gsn",
		146: "dvbRccMacLayer",
		147: "dvbRccDownstream",
		148: "dvbRccUpstream",
		149: "atmVirtual",
		150: "mplsTunnel",
		151: "srp",
		152: "voiceOverAtm",
		153: "voiceOverFrameRelay",
		154: "idsl",
		155: "compositeLink",
		156: "ss7SigLink",
		157: "propWirelessP2P",
		158: "frForward",
		159: "rfc1483",
		160: "usb",
		161: "ieee8023adLag",
		162: "bgppolicyaccounting",
		163: "frf16MfrBundle",
		164: "h323Gatekeeper",
		165: "h323Proxy",
		166: "mpls",
		167: "mfSigLink",
		168: "hdsl2",
		169: "shdsl",
		170: "ds1FDL",
		171: "pos",
		172: "dvbAsiIn",
		173: "dvbAsiOut",
		174: "plc",
		175: "nfas",
		176: "tr008",
		177: "gr303RDT",
		178: "gr303IDT",
		179: "isup",
		180: "propDocsWirelessMaclayer",
		181: "propDocsWirelessDownstream",
		182: "propDocsWirelessUpstream",
		183: "hiperlan2",
		184: "propBWAp2Mp",
		185: "sonetOverheadChannel",
		186: "digitalWrapperOverheadChannel",
		187: "aal2",
		188: "radioMAC",
		189: "atmRadio",
		190: "imt",
		191: "mvl",
		192: "reachDSL",
		193: "frDlciEndPt",
		194: "atmVciEndPt",
		195: "opticalChannel",
		196: "opticalTransport",
		197: "propAtm",
		198: "voiceOverCable",
		199: "infiniband",
		200: "teLink",
		201: "q2931",
		202: "virtualTg",
		203: "sipTg",
		204: "sipSig",
		205: "docsCableUpstreamChannel",
		206: "econet",
		207: "pon155",
		208: "pon622",
		209: "bridge",
		210: "linegroup",
		211: "voiceEMFGD",
		212: "voiceFGDEANA",
		213: "voiceDID",
		214: "mpegTransport",
		215: "sixToFour",
		216: "gtp",
		217: "pdnEtherLoop1",
		218: "pdnEtherLoop2",
		219: "opticalChannelGroup",
		220: "homepna",
		221: "gfp",
		222: "ciscoISLvlan",
		223: "actelisMetaLOOP",
		224: "fcipLink",
		225: "rpr",
		226: "qam",
		227: "lmp",
		228: "cblVectaStar",
		229: "docsCableMCmtsDownstream",
		230: "adsl2",
		231: "macSecControlledIF",
		232: "macSecUncontrolledIF",
		233: "aviciOpticalEther",
		234: "atmbond",
		235: "voiceFGDOS",
		236: "mocaVersion1",
		237: "ieee80216WMAN",
		238: "adsl2plus",
		239: "dvbRcsMacLayer",
		240: "dvbTdm",
		241: "dvbRcsTdma",
		242: "x86Laps",
		243: "wwanPP",
		244: "wwanPP2",
		245: "voiceEBS",
		246: "ifPwType",
		247: "ilan",
		248: "pip",
		249: "aluELP",
		250: "gpon",
		251: "vdsl2",
		252: "capwapDot11Profile",
		253: "capwapDot11Bss",
		254: "capwapWtpVirtualRadio",
		255: "bits",
		256: "docsCableUpstreamRfPort",
		257: "cableDownstreamRfPort",
		258: "vmwareVirtualNic",
		259: "ieee802154",
		260: "otnOdu",
		261: "otnOtu",
		262: "ifVfiType",
		263: "g9981",
		264: "g9982",
		265: "g9983",
		266: "aluEpon",
		267: "aluEponOnu",
		268: "aluEponPhysicalUni",
		269: "aluEponLogicalLink",
		270: "aluGponOnu",
		271: "aluGponPhysicalUni",
		272: "vmwareNicTeam",
	}
	Port_Type_value = map[string]int32{
		"TYPE_UNSET":                    0,
		"other":                         1,
		"regular1822":                   2,
		"hdh1822":                       3,
		"ddnX25":                        4,
		"rfc877x25":                     5,
		"ethernetCsmacd":                6,
		"iso88023Csmacd":                7,
		"iso88024TokenBus":              8,
		"iso88025TokenRing":             9,
		"iso88026Man":                   10,
		"starLan":                       11,
		"proteon10Mbit":                 12,
		"proteon80Mbit":                 13,
		"hyperchannel":                  14,
		"fddi":                          15,
		"lapb":                          16,
		"sdlc":                          17,
		"ds1":                           18,
		"e1":                            19,
		"basicISDN":                     20,
		"primaryISDN":                   21,
		"propPointToPointSerial":        22,
		"ppp":                           23,
		"softwareLoopback":              24,
		"eon":                           25,
		"ethernet3Mbit":                 26,
		"nsip":                          27,
		"slip":                          28,
		"ultra":                         29,
		"ds3":                           30,
		"sip":                           31,
		"frameRelay":                    32,
		"rs232":                         33,
		"para":                          34,
		"arcnet":                        35,
		"arcnetPlus":                    36,
		"atm":                           37,
		"miox25":                        38,
		"sonet":                         39,
		"x25ple":                        40,
		"iso88022llc":                   41,
		"localTalk":                     42,
		"smdsDxi":                       43,
		"frameRelayService":             44,
		"v35":                           45,
		"hssi":                          46,
		"hippi":                         47,
		"modem":                         48,
		"aal5":                          49,
		"sonetPath":                     50,
		"sonetVT":                       51,
		"smdsIcip":                      52,
		"propVirtual":                   53,
		"propMultiplexor":               54,
		"ieee80212":                     55,
		"fibreChannel":                  56,
		"hippiInterface":                57,
		"frameRelayInterconnect":        58,
		"aflane8023":                    59,
		"aflane8025":                    60,
		"cctEmul":                       61,
		"fastEther":                     62,
		"isdn":                          63,
		"v11":                           64,
		"v36":                           65,
		"g703at64k":                     66,
		"g703at2mb":                     67,
		"qllc":                          68,
		"fastEtherFX":                   69,
		"channel":                       70,
		"ieee80211":                     71,
		"ibm370parChan":                 72,
		"escon":                         73,
		"dlsw":                          74,
		"isdns":                         75,
		"isdnu":                         76,
		"lapd":                          77,
		"ipSwitch":                      78,
		"rsrb":                          79,
		"atmLogical":                    80,
		"ds0":                           81,
		"ds0Bundle":                     82,
		"bsc":                           83,
		"async":                         84,
		"cnr":                           85,
		"iso88025Dtr":                   86,
		"eplrs":                         87,
		"arap":                          88,
		"propCnls":                      89,
		"hostPad":                       90,
		"termPad":                       91,
		"frameRelayMPI":                 92,
		"x213":                          93,
		"adsl":                          94,
		"radsl":                         95,
		"sdsl":                          96,
		"vdsl":                          97,
		"iso88025CRFPInt":               98,
		"myrinet":                       99,
		"voiceEM":                       100,
		"voiceFXO":                      101,
		"voiceFXS":                      102,
		"voiceEncap":                    103,
		"voiceOverIp":                   104,
		"atmDxi":                        105,
		"atmFuni":                       106,
		"atmIma":                        107,
		"pppMultilinkBundle":            108,
		"ipOverCdlc":                    109,
		"ipOverClaw":                    110,
		"stackToStack":                  111,
		"virtualIpAddress":              112,
		"mpc":                           113,
		"ipOverAtm":                     114,
		"iso88025Fiber":                 115,
		"tdlc":                          116,
		"gigabitEthernet":               117,
		"hdlc":                          118,
		"lapf":                          119,
		"v37":                           120,
		"x25mlp":                        121,
		"x25huntGroup":                  122,
		"transpHdlc":                    123,
		"interleave":                    124,
		"fast":                          125,
		"ip":                            126,
		"docsCableMaclayer":             127,
		"docsCableDownstream":           128,
		"docsCableUpstream":             129,
		"a12MppSwitch":                  130,
		"tunnel":                        131,
		"coffee":                        132,
		"ces":                           133,
		"atmSubInterface":               134,
		"l2vlan":                        135,
		"l3ipvlan":                      136,
		"l3ipxvlan":                     137,
		"digitalPowerline":              138,
		"mediaMailOverIp":               139,
		"dtm":                           140,
		"dcn":                           141,
		"ipForward":                     142,
		"msdsl":                         143,
		"ieee1394":                      144,
		"if_gsn":                        145,
		"dvbRccMacLayer":                146,
		"dvbRccDownstream":              147,
		"dvbRccUpstream":                148,
		"atmVirtual":                    149,
		"mplsTunnel":                    150,
		"srp":                           151,
		"voiceOverAtm":                  152,
		"voiceOverFrameRelay":           153,
		"idsl":                          154,
		"compositeLink":                 155,
		"ss7SigLink":                    156,
		"propWirelessP2P":               157,
		"frForward":                     158,
		"rfc1483":                       159,
		"usb":                           160,
		"ieee8023adLag":                 161,
		"bgppolicyaccounting":           162,
		"frf16MfrBundle":                163,
		"h323Gatekeeper":                164,
		"h323Proxy":                     165,
		"mpls":                          166,
		"mfSigLink":                     167,
		"hdsl2":                         168,
		"shdsl":                         169,
		"ds1FDL":                        170,
		"pos":                           171,
		"dvbAsiIn":                      172,
		"dvbAsiOut":                     173,
		"plc":                           174,
		"nfas":                          175,
		"tr008":                         176,
		"gr303RDT":                      177,
		"gr303IDT":                      178,
		"isup":                          179,
		"propDocsWirelessMaclayer":      180,
		"propDocsWirelessDownstream":    181,
		"propDocsWirelessUpstream":      182,
		"hiperlan2":                     183,
		"propBWAp2Mp":                   184,
		"sonetOverheadChannel":          185,
		"digitalWrapperOverheadChannel": 186,
		"aal2":                          187,
		"radioMAC":                      188,
		"atmRadio":                      189,
		"imt":                           190,
		"mvl":                           191,
		"reachDSL":                      192,
		"frDlciEndPt":                   193,
		"atmVciEndPt":                   194,
		"opticalChannel":                195,
		"opticalTransport":              196,
		"propAtm":                       197,
		"voiceOverCable":                198,
		"infiniband":                    199,
		"teLink":                        200,
		"q2931":                         201,
		"virtualTg":                     202,
		"sipTg":                         203,
		"sipSig":                        204,
		"docsCableUpstreamChannel":      205,
		"econet":                        206,
		"pon155":                        207,
		"pon622":                        208,
		"bridge":                        209,
		"linegroup":                     210,
		"voiceEMFGD":                    211,
		"voiceFGDEANA":                  212,
		"voiceDID":                      213,
		"mpegTransport":                 214,
		"sixToFour":                     215,
		"gtp":                           216,
		"pdnEtherLoop1":                 217,
		"pdnEtherLoop2":                 218,
		"opticalChannelGroup":           219,
		"homepna":                       220,
		"gfp":                           221,
		"ciscoISLvlan":                  222,
		"actelisMetaLOOP":               223,
		"fcipLink":                      224,
		"rpr":                           225,
		"qam":                           226,
		"lmp":                           227,
		"cblVectaStar":                  228,
		"docsCableMCmtsDownstream":      229,
		"adsl2":                         230,
		"macSecControlledIF":            231,
		"macSecUncontrolledIF":          232,
		"aviciOpticalEther":             233,
		"atmbond":                       234,
		"voiceFGDOS":                    235,
		"mocaVersion1":                  236,
		"ieee80216WMAN":                 237,
		"adsl2plus":                     238,
		"dvbRcsMacLayer":                239,
		"dvbTdm":                        240,
		"dvbRcsTdma":                    241,
		"x86Laps":                       242,
		"wwanPP":                        243,
		"wwanPP2":                       244,
		"voiceEBS":                      245,
		"ifPwType":                      246,
		"ilan":                          247,
		"pip":                           248,
		"aluELP":                        249,
		"gpon":                          250,
		"vdsl2":                         251,
		"capwapDot11Profile":            252,
		"capwapDot11Bss":                253,
		"capwapWtpVirtualRadio":         254,
		"bits":                          255,
		"docsCableUpstreamRfPort":       256,
		"cableDownstreamRfPort":         257,
		"vmwareVirtualNic":              258,
		"ieee802154":                    259,
		"otnOdu":                        260,
		"otnOtu":                        261,
		"ifVfiType":                     262,
		"g9981":                         263,
		"g9982":                         264,
		"g9983":                         265,
		"aluEpon":                       266,
		"aluEponOnu":                    267,
		"aluEponPhysicalUni":            268,
		"aluEponLogicalLink":            269,
		"aluGponOnu":                    270,
		"aluGponPhysicalUni":            271,
		"vmwareNicTeam":                 272,
	}
)

func (x Port_Type) Enum() *Port_Type {
	p := new(Port_Type)
	*p = x
	return p
}

func (x Port_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_device_proto_enumTypes[2].Descriptor()
}

func (Port_Type) Type() protoreflect.EnumType {
	return &file_device_proto_enumTypes[2]
}

func (x Port_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Type.Descriptor instead.
func (Port_Type) EnumDescriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{1, 0}
}

type Port_Status int32

const (
	Port_unset          Port_Status = 0
	Port_up             Port_Status = 1
	Port_down           Port_Status = 2
	Port_testing        Port_Status = 3
	Port_unknown        Port_Status = 4
	Port_dormant        Port_Status = 5
	Port_notPresent     Port_Status = 6
	Port_lowerLayerDown Port_Status = 7
)

// Enum value maps for Port_Status.
var (
	Port_Status_name = map[int32]string{
		0: "unset",
		1: "up",
		2: "down",
		3: "testing",
		4: "unknown",
		5: "dormant",
		6: "notPresent",
		7: "lowerLayerDown",
	}
	Port_Status_value = map[string]int32{
		"unset":          0,
		"up":             1,
		"down":           2,
		"testing":        3,
		"unknown":        4,
		"dormant":        5,
		"notPresent":     6,
		"lowerLayerDown": 7,
	}
)

func (x Port_Status) Enum() *Port_Status {
	p := new(Port_Status)
	*p = x
	return p
}

func (x Port_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_device_proto_enumTypes[3].Descriptor()
}

func (Port_Status) Type() protoreflect.EnumType {
	return &file_device_proto_enumTypes[3]
}

func (x Port_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_Status.Descriptor instead.
func (Port_Status) EnumDescriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{1, 1}
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hostname used ot reach the device
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty" bson:"hostname"`
	// configured name on the device
	Sysname string `protobuf:"bytes,2,opt,name=sysname,proto3" json:"sysname,omitempty" bson:"sysname"`
	// version of the device
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" bson:"version"`
	// the snmpp object id of the device
	SnmpObjectId string `protobuf:"bytes,4,opt,name=snmp_object_id,json=snmpObjectId,proto3" json:"snmp_object_id,omitempty" bson:"snmp_object_id"`
	// the IF-MIB port index of the device
	PortIndex int32 `protobuf:"varint,5,opt,name=port_index,json=portIndex,proto3" json:"port_index,omitempty" bson:"port_index"`
	// the uptime of the device
	Uptime string `protobuf:"bytes,6,opt,name=uptime,proto3" json:"uptime,omitempty" bson:"uptime"`
	// the last time the device was changed
	LastChanged string `protobuf:"bytes,7,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty" bson:"last_changed"`
	// configured system contact
	Contact string `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty" bson:"contact"`
	// configure system location
	Location string `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty" bson:"location"`
	// main bridge mac address
	BridgeMacAddress string `protobuf:"bytes,10,opt,name=bridge_mac_address,json=bridgeMacAddress,proto3" json:"bridge_mac_address,omitempty" bson:"bridge_mac_address"`
	// the type of the device
	Type Device_Type `protobuf:"varint,11,opt,name=type,proto3,enum=device.Device_Type" json:"type,omitempty" bson:"type"`
	// slots of a device (e.g. for a chassis) that has multiple slots for devices
	Slots []*Device_Slot `protobuf:"bytes,12,rep,name=slots,proto3" json:"slots,omitempty" bson:"slots"`
	// slots of a device (e.g. for a chassis) that has multiple slots for devices
	Modules         []*Device_Module `protobuf:"bytes,13,rep,name=modules,proto3" json:"modules,omitempty" bson:"modules"`
	Ports           []*Port          `protobuf:"bytes,14,rep,name=ports,proto3" json:"ports,omitempty" bson:"ports"`
	AggregatedPorts []*Aggregation   `protobuf:"bytes,15,rep,name=aggregated_ports,json=aggregatedPorts,proto3" json:"aggregated_ports,omitempty" bson:"aggregated_ports"`
	// the role of the device in the stack
	StackRole Device_StackRole `protobuf:"varint,16,opt,name=stack_role,json=stackRole,proto3,enum=device.Device_StackRole" json:"stack_role,omitempty" bson:"stack_role"`
	// the priority of the device in the stack
	StackPriority int64 `protobuf:"varint,17,opt,name=stack_priority,json=stackPriority,proto3" json:"stack_priority,omitempty" bson:"stack_priority"`
	// the device model, e.g. 22 for Cisco Catalyst 2960 or S5700-28X-LI-24S-AC
	Model string `protobuf:"bytes,18,opt,name=model,proto3" json:"model,omitempty" bson:"model"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Device) GetSysname() string {
	if x != nil {
		return x.Sysname
	}
	return ""
}

func (x *Device) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Device) GetSnmpObjectId() string {
	if x != nil {
		return x.SnmpObjectId
	}
	return ""
}

func (x *Device) GetPortIndex() int32 {
	if x != nil {
		return x.PortIndex
	}
	return 0
}

func (x *Device) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *Device) GetLastChanged() string {
	if x != nil {
		return x.LastChanged
	}
	return ""
}

func (x *Device) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Device) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Device) GetBridgeMacAddress() string {
	if x != nil {
		return x.BridgeMacAddress
	}
	return ""
}

func (x *Device) GetType() Device_Type {
	if x != nil {
		return x.Type
	}
	return Device_TYPE_UNSET
}

func (x *Device) GetSlots() []*Device_Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *Device) GetModules() []*Device_Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Device) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Device) GetAggregatedPorts() []*Aggregation {
	if x != nil {
		return x.AggregatedPorts
	}
	return nil
}

func (x *Device) GetStackRole() Device_StackRole {
	if x != nil {
		return x.StackRole
	}
	return Device_STACK_ROLE_UNKNOWN
}

func (x *Device) GetStackPriority() int64 {
	if x != nil {
		return x.StackPriority
	}
	return 0
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregatedId string `protobuf:"bytes,1,opt,name=aggregated_id,json=aggregatedId,proto3" json:"aggregated_id,omitempty" bson:"aggregated_id"`
	// snmp index (IF-MIB)
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty" bson:"index"`
	// snmp physical index (IF-ENTITY-MIB)
	IndexPhysical int64 `protobuf:"varint,3,opt,name=index_physical,json=indexPhysical,proto3" json:"index_physical,omitempty" bson:"index_physical"`
	// name of the port (depending on the vendor, e.g. GigabitEthernet0/0/0)
	// different vendors have different naming conventions and use different fields in the SNMP MIBs
	// but this field should be used to display the name of the port (GigabitEthernet0/0/0, FastEthernet0/0, etc.)
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	// configured description. if the device has a description field, it should be used here
	// (e.g. "uplink to core switch") or a #O123123120213
	Description             string                                   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	MacAddress              string                                   `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" bson:"mac_address"`
	Type                    Port_Type                                `protobuf:"varint,7,opt,name=type,proto3,enum=device.Port_Type" json:"type,omitempty" bson:"type"`
	AdminStatus             Port_Status                              `protobuf:"varint,8,opt,name=admin_status,json=adminStatus,proto3,enum=device.Port_Status" json:"admin_status,omitempty" bson:"admin_status"`                   // the desired state of the port
	OperationalStatus       Port_Status                              `protobuf:"varint,9,opt,name=operational_status,json=operationalStatus,proto3,enum=device.Port_Status" json:"operational_status,omitempty" bson:"operational_status"` // the current state of the port
	LastChanged             *timestamppb.Timestamp                   `protobuf:"bytes,10,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty" bson:"last_changed"`
	Speed                   int64                                    `protobuf:"varint,11,opt,name=speed,proto3" json:"speed,omitempty" bson:"speed"`
	Duplex                  string                                   `protobuf:"bytes,12,opt,name=duplex,proto3" json:"duplex,omitempty" bson:"duplex"`
	Mtu                     int64                                    `protobuf:"varint,13,opt,name=mtu,proto3" json:"mtu,omitempty" bson:"mtu"`
	Stats                   *Port_Statistics                         `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty" bson:"stats"`
	Transceiver             *Transceiver                             `protobuf:"bytes,15,opt,name=transceiver,proto3" json:"transceiver,omitempty" bson:"transceiver"`
	Neighbor                *Neighbor                                `protobuf:"bytes,16,opt,name=neighbor,proto3" json:"neighbor,omitempty" bson:"neighbor"`
	MacAddressTable         []*MACEntry                              `protobuf:"bytes,17,rep,name=mac_address_table,json=macAddressTable,proto3" json:"mac_address_table,omitempty" bson:"mac_address_table"`
	DhcpTable               []*DHCPEntry                             `protobuf:"bytes,18,rep,name=dhcp_table,json=dhcpTable,proto3" json:"dhcp_table,omitempty" bson:"dhcp_table"`
	Config                  string                                   `protobuf:"bytes,19,opt,name=config,proto3" json:"config,omitempty" bson:"config"` // text blob of current config
	ConfiguredTrafficPolicy *trafficpolicypb.ConfiguredTrafficPolicy `protobuf:"bytes,20,opt,name=configuredTrafficPolicy,proto3" json:"configuredTrafficPolicy,omitempty" bson:"configuredTrafficPolicy"`
	Qos                     *trafficpolicypb.QOS                     `protobuf:"bytes,21,opt,name=qos,proto3" json:"qos,omitempty" bson:"qos"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{1}
}

func (x *Port) GetAggregatedId() string {
	if x != nil {
		return x.AggregatedId
	}
	return ""
}

func (x *Port) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Port) GetIndexPhysical() int64 {
	if x != nil {
		return x.IndexPhysical
	}
	return 0
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Port) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Port) GetType() Port_Type {
	if x != nil {
		return x.Type
	}
	return Port_TYPE_UNSET
}

func (x *Port) GetAdminStatus() Port_Status {
	if x != nil {
		return x.AdminStatus
	}
	return Port_unset
}

func (x *Port) GetOperationalStatus() Port_Status {
	if x != nil {
		return x.OperationalStatus
	}
	return Port_unset
}

func (x *Port) GetLastChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChanged
	}
	return nil
}

func (x *Port) GetSpeed() int64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Port) GetDuplex() string {
	if x != nil {
		return x.Duplex
	}
	return ""
}

func (x *Port) GetMtu() int64 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Port) GetStats() *Port_Statistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Port) GetTransceiver() *Transceiver {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

func (x *Port) GetNeighbor() *Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *Port) GetMacAddressTable() []*MACEntry {
	if x != nil {
		return x.MacAddressTable
	}
	return nil
}

func (x *Port) GetDhcpTable() []*DHCPEntry {
	if x != nil {
		return x.DhcpTable
	}
	return nil
}

func (x *Port) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Port) GetConfiguredTrafficPolicy() *trafficpolicypb.ConfiguredTrafficPolicy {
	if x != nil {
		return x.ConfiguredTrafficPolicy
	}
	return nil
}

func (x *Port) GetQos() *trafficpolicypb.QOS {
	if x != nil {
		return x.Qos
	}
	return nil
}

type Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPortId    string `protobuf:"bytes,1,opt,name=local_port_id,json=localPortId,proto3" json:"local_port_id,omitempty" bson:"local_port_id"`
	LocalPort      string `protobuf:"bytes,2,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty" bson:"local_port"`
	RemotePort     string `protobuf:"bytes,3,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty" bson:"remote_port"`
	RemoteHostname string `protobuf:"bytes,4,opt,name=remote_hostname,json=remoteHostname,proto3" json:"remote_hostname,omitempty" bson:"remote_hostname"`
}

func (x *Neighbor) Reset() {
	*x = Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighbor) ProtoMessage() {}

func (x *Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighbor.ProtoReflect.Descriptor instead.
func (*Neighbor) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{2}
}

func (x *Neighbor) GetLocalPortId() string {
	if x != nil {
		return x.LocalPortId
	}
	return ""
}

func (x *Neighbor) GetLocalPort() string {
	if x != nil {
		return x.LocalPort
	}
	return ""
}

func (x *Neighbor) GetRemotePort() string {
	if x != nil {
		return x.RemotePort
	}
	return ""
}

func (x *Neighbor) GetRemoteHostname() string {
	if x != nil {
		return x.RemoteHostname
	}
	return ""
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority  int64                  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" bson:"priority"`
	Mode      string                 `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty" bson:"mode"`
	Type      string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	OperKey   string                 `protobuf:"bytes,4,opt,name=oper_key,json=operKey,proto3" json:"oper_key,omitempty" bson:"oper_key"`
	Status    string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" bson:"status"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
	Ports     []*Port                `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty" bson:"ports"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{3}
}

func (x *Aggregation) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Aggregation) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Aggregation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Aggregation) GetOperKey() string {
	if x != nil {
		return x.OperKey
	}
	return ""
}

func (x *Aggregation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Aggregation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Aggregation) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

type Transceivers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transceivers []*Transceiver `protobuf:"bytes,1,rep,name=transceivers,proto3" json:"transceivers,omitempty" bson:"transceivers"`
}

func (x *Transceivers) Reset() {
	*x = Transceivers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transceivers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transceivers) ProtoMessage() {}

func (x *Transceivers) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transceivers.ProtoReflect.Descriptor instead.
func (*Transceivers) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{4}
}

func (x *Transceivers) GetTransceivers() []*Transceiver {
	if x != nil {
		return x.Transceivers
	}
	return nil
}

type Transceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalPortIndex int64                   `protobuf:"varint,1,opt,name=physical_port_index,json=physicalPortIndex,proto3" json:"physical_port_index,omitempty" bson:"physical_port_index"`
	ConnectorType     string                  `protobuf:"bytes,2,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty" bson:"connector_type"`
	Ddm               bool                    `protobuf:"varint,3,opt,name=ddm,proto3" json:"ddm,omitempty" bson:"ddm"`
	Vendor            string                  `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty" bson:"vendor"`
	Type              string                  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	TransferDistance  string                  `protobuf:"bytes,6,opt,name=transfer_distance,json=transferDistance,proto3" json:"transfer_distance,omitempty" bson:"transfer_distance"`
	Wavelength        string                  `protobuf:"bytes,7,opt,name=wavelength,proto3" json:"wavelength,omitempty" bson:"wavelength"`
	SerialNumber      string                  `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" bson:"serial_number"`
	PartNumber        string                  `protobuf:"bytes,9,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty" bson:"part_number"`
	ManufacturingDate string                  `protobuf:"bytes,10,opt,name=manufacturing_date,json=manufacturingDate,proto3" json:"manufacturing_date,omitempty" bson:"manufacturing_date"`
	Stats             *Transceiver_Statistics `protobuf:"bytes,11,opt,name=stats,proto3" json:"stats,omitempty" bson:"stats"`
}

func (x *Transceiver) Reset() {
	*x = Transceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transceiver) ProtoMessage() {}

func (x *Transceiver) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transceiver.ProtoReflect.Descriptor instead.
func (*Transceiver) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{5}
}

func (x *Transceiver) GetPhysicalPortIndex() int64 {
	if x != nil {
		return x.PhysicalPortIndex
	}
	return 0
}

func (x *Transceiver) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *Transceiver) GetDdm() bool {
	if x != nil {
		return x.Ddm
	}
	return false
}

func (x *Transceiver) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Transceiver) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Transceiver) GetTransferDistance() string {
	if x != nil {
		return x.TransferDistance
	}
	return ""
}

func (x *Transceiver) GetWavelength() string {
	if x != nil {
		return x.Wavelength
	}
	return ""
}

func (x *Transceiver) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Transceiver) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Transceiver) GetManufacturingDate() string {
	if x != nil {
		return x.ManufacturingDate
	}
	return ""
}

func (x *Transceiver) GetStats() *Transceiver_Statistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

type MACEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareAddress string `protobuf:"bytes,1,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty" bson:"hardware_address"`
	Vlan            int64  `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty" bson:"vlan"`
	Vendor          string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" bson:"vendor"`
}

func (x *MACEntry) Reset() {
	*x = MACEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MACEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MACEntry) ProtoMessage() {}

func (x *MACEntry) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MACEntry.ProtoReflect.Descriptor instead.
func (*MACEntry) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{6}
}

func (x *MACEntry) GetHardwareAddress() string {
	if x != nil {
		return x.HardwareAddress
	}
	return ""
}

func (x *MACEntry) GetVlan() int64 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *MACEntry) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

type DHCPEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress       string                 `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" bson:"ip_address"`
	HardwareAddress string                 `protobuf:"bytes,2,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty" bson:"hardware_address"`
	Vendor          string                 `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" bson:"vendor"`
	Vlan            int64                  `protobuf:"varint,4,opt,name=vlan,proto3" json:"vlan,omitempty" bson:"vlan"`
	Lease           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lease,proto3" json:"lease,omitempty" bson:"lease"`
}

func (x *DHCPEntry) Reset() {
	*x = DHCPEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPEntry) ProtoMessage() {}

func (x *DHCPEntry) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPEntry.ProtoReflect.Descriptor instead.
func (*DHCPEntry) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{7}
}

func (x *DHCPEntry) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DHCPEntry) GetHardwareAddress() string {
	if x != nil {
		return x.HardwareAddress
	}
	return ""
}

func (x *DHCPEntry) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DHCPEntry) GetVlan() int64 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *DHCPEntry) GetLease() *timestamppb.Timestamp {
	if x != nil {
		return x.Lease
	}
	return nil
}

type PhysicalPortInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Oid   string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty" bson:"oid"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" bson:"value"`
}

func (x *PhysicalPortInformation) Reset() {
	*x = PhysicalPortInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalPortInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalPortInformation) ProtoMessage() {}

func (x *PhysicalPortInformation) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalPortInformation.ProtoReflect.Descriptor instead.
func (*PhysicalPortInformation) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{8}
}

func (x *PhysicalPortInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhysicalPortInformation) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *PhysicalPortInformation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// PortIndexEntity is a entity that is used to map the port index to the description
// this is used both for the physical port and the logical port
type PortIndexEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IfIndex     int64  `protobuf:"varint,1,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty" bson:"if_index"`
	EntityIndex int64  `protobuf:"varint,2,opt,name=entity_index,json=entityIndex,proto3" json:"entity_index,omitempty" bson:"entity_index"`
	Port        string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
}

func (x *PortIndexEntity) Reset() {
	*x = PortIndexEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortIndexEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortIndexEntity) ProtoMessage() {}

func (x *PortIndexEntity) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortIndexEntity.ProtoReflect.Descriptor instead.
func (*PortIndexEntity) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{9}
}

func (x *PortIndexEntity) GetIfIndex() int64 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

func (x *PortIndexEntity) GetEntityIndex() int64 {
	if x != nil {
		return x.EntityIndex
	}
	return 0
}

func (x *PortIndexEntity) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *PortIndexEntity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// PortIndex is a map of the port index to the description
type PortIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the port index to the description
	// the map looks like this:
	//
	//	{
	//	     "GigabitEthernet 0/1":  PortIndexEntity{...},
	//	     "GigabitEthernet 0/2":  PortIndexEntity{...},
	//	}
	Ports map[string]*PortIndexEntity `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"ports" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortIndex) Reset() {
	*x = PortIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortIndex) ProtoMessage() {}

func (x *PortIndex) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortIndex.ProtoReflect.Descriptor instead.
func (*PortIndex) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{10}
}

func (x *PortIndex) GetPorts() map[string]*PortIndexEntity {
	if x != nil {
		return x.Ports
	}
	return nil
}

type PortSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the port (e.g. GigabitEthernet0/0/0)
	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty" bson:"port"`
	// snmp index (IF-MIB)
	Index *int64 `protobuf:"varint,2,opt,name=index,proto3,oneof" json:"index,omitempty" bson:"index"`
	// snmp physical index (IF-ENTITY-MIB)
	IndexPhysical *int64 `protobuf:"varint,3,opt,name=index_physical,json=indexPhysical,proto3,oneof" json:"index_physical,omitempty" bson:"index_physical"`
	// the desired state of the port
	AdminStatus Port_Status `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,proto3,enum=device.Port_Status" json:"admin_status,omitempty" bson:"admin_status"`
	// the current state of the port
	OperationalStatus Port_Status `protobuf:"varint,5,opt,name=operational_status,json=operationalStatus,proto3,enum=device.Port_Status" json:"operational_status,omitempty" bson:"operational_status"`
	// mac address of the port
	MacAddress *string `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3,oneof" json:"mac_address,omitempty" bson:"mac_address"`
	// last time the port was changed (link etc)
	LastChanged *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty" bson:"last_changed"`
	// current egotiated speed of the port
	Speed int64 `protobuf:"varint,8,opt,name=speed,proto3" json:"speed,omitempty" bson:"speed"`
	// mac addresses registered on the port
	MacAddressTable []*MACEntry `protobuf:"bytes,9,rep,name=mac_address_table,json=macAddressTable,proto3" json:"mac_address_table,omitempty" bson:"mac_address_table"`
	// dhcp entries registered on the port
	DhcpTable []*DHCPEntry `protobuf:"bytes,10,rep,name=dhcp_table,json=dhcpTable,proto3" json:"dhcp_table,omitempty" bson:"dhcp_table"`
}

func (x *PortSignature) Reset() {
	*x = PortSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSignature) ProtoMessage() {}

func (x *PortSignature) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSignature.ProtoReflect.Descriptor instead.
func (*PortSignature) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{11}
}

func (x *PortSignature) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *PortSignature) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PortSignature) GetIndexPhysical() int64 {
	if x != nil && x.IndexPhysical != nil {
		return *x.IndexPhysical
	}
	return 0
}

func (x *PortSignature) GetAdminStatus() Port_Status {
	if x != nil {
		return x.AdminStatus
	}
	return Port_unset
}

func (x *PortSignature) GetOperationalStatus() Port_Status {
	if x != nil {
		return x.OperationalStatus
	}
	return Port_unset
}

func (x *PortSignature) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *PortSignature) GetLastChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChanged
	}
	return nil
}

func (x *PortSignature) GetSpeed() int64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PortSignature) GetMacAddressTable() []*MACEntry {
	if x != nil {
		return x.MacAddressTable
	}
	return nil
}

func (x *PortSignature) GetDhcpTable() []*DHCPEntry {
	if x != nil {
		return x.DhcpTable
	}
	return nil
}

type Device_Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what number the slot has (1-99)
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty" bson:"number"`
	// the devices that are in the slot
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" bson:"device"`
}

func (x *Device_Slot) Reset() {
	*x = Device_Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Slot) ProtoMessage() {}

func (x *Device_Slot) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Slot.ProtoReflect.Descriptor instead.
func (*Device_Slot) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Device_Slot) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Device_Slot) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type Device_Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what number the module has (1-99)
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty" bson:"number"`
	// the devices that are in the module
	Device *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" bson:"device"`
}

func (x *Device_Module) Reset() {
	*x = Device_Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Module) ProtoMessage() {}

func (x *Device_Module) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Module.ProtoReflect.Descriptor instead.
func (*Device_Module) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Device_Module) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Device_Module) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type Port_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *Port_Statistics_Metrics `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty" bson:"input"`
	Output *Port_Statistics_Metrics `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty" bson:"output"`
	Resets int64                    `protobuf:"varint,3,opt,name=resets,proto3" json:"resets,omitempty" bson:"resets"`
}

func (x *Port_Statistics) Reset() {
	*x = Port_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port_Statistics) ProtoMessage() {}

func (x *Port_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port_Statistics.ProtoReflect.Descriptor instead.
func (*Port_Statistics) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Port_Statistics) GetInput() *Port_Statistics_Metrics {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Port_Statistics) GetOutput() *Port_Statistics_Metrics {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Port_Statistics) GetResets() int64 {
	if x != nil {
		return x.Resets
	}
	return 0
}

type Port_Statistics_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets   int64 `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty" bson:"packets"`
	Bits      int64 `protobuf:"varint,2,opt,name=bits,proto3" json:"bits,omitempty" bson:"bits"`
	Unicast   int64 `protobuf:"varint,3,opt,name=unicast,proto3" json:"unicast,omitempty" bson:"unicast"`
	Broadcast int64 `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty" bson:"broadcast"`
	Multicast int64 `protobuf:"varint,5,opt,name=multicast,proto3" json:"multicast,omitempty" bson:"multicast"`
	Pauses    int64 `protobuf:"varint,6,opt,name=pauses,proto3" json:"pauses,omitempty" bson:"pauses"`
	Errors    int64 `protobuf:"varint,7,opt,name=errors,proto3" json:"errors,omitempty" bson:"errors"`
	CrcErrors int64 `protobuf:"varint,8,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty" bson:"crc_errors"`
}

func (x *Port_Statistics_Metrics) Reset() {
	*x = Port_Statistics_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port_Statistics_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port_Statistics_Metrics) ProtoMessage() {}

func (x *Port_Statistics_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port_Statistics_Metrics.ProtoReflect.Descriptor instead.
func (*Port_Statistics_Metrics) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Port_Statistics_Metrics) GetPackets() int64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetBits() int64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetUnicast() int64 {
	if x != nil {
		return x.Unicast
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetBroadcast() int64 {
	if x != nil {
		return x.Broadcast
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetMulticast() int64 {
	if x != nil {
		return x.Multicast
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetPauses() int64 {
	if x != nil {
		return x.Pauses
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetErrors() int64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *Port_Statistics_Metrics) GetCrcErrors() int64 {
	if x != nil {
		return x.CrcErrors
	}
	return 0
}

type Transceiver_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   float64                `protobuf:"fixed64,1,opt,name=current,proto3" json:"current,omitempty" bson:"current"` // should be returned in mA
	Rx        float64                `protobuf:"fixed64,2,opt,name=rx,proto3" json:"rx,omitempty" bson:"rx"`           // should be returned in dBm
	Tx        float64                `protobuf:"fixed64,3,opt,name=tx,proto3" json:"tx,omitempty" bson:"tx"`           // should be returned in dBm
	Temp      float64                `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty" bson:"temp"`       // in celsius
	Voltage   float64                `protobuf:"fixed64,5,opt,name=voltage,proto3" json:"voltage,omitempty" bson:"voltage"` // should be returned in V
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
}

func (x *Transceiver_Statistics) Reset() {
	*x = Transceiver_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transceiver_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transceiver_Statistics) ProtoMessage() {}

func (x *Transceiver_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transceiver_Statistics.ProtoReflect.Descriptor instead.
func (*Transceiver_Statistics) Descriptor() ([]byte, []int) {
	return file_device_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Transceiver_Statistics) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Transceiver_Statistics) GetRx() float64 {
	if x != nil {
		return x.Rx
	}
	return 0
}

func (x *Transceiver_Statistics) GetTx() float64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *Transceiver_Statistics) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *Transceiver_Statistics) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *Transceiver_Statistics) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_device_proto protoreflect.FileDescriptor

var file_device_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x08,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6e, 0x6d, 0x70,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x6d, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x46, 0x0a, 0x04, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x48, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x7d, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x06, 0x22, 0x68, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53,
	0x4c, 0x41, 0x56, 0x45, 0x10, 0x03, 0x22, 0xac, 0x2c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x11, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x41, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x64, 0x68, 0x63, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x71, 0x6f, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x4f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73,
	0x1a, 0xf3, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xba, 0x21, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x31, 0x38, 0x32, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x68,
	0x64, 0x68, 0x31, 0x38, 0x32, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x64, 0x6e, 0x58,
	0x32, 0x35, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x66, 0x63, 0x38, 0x37, 0x37, 0x78, 0x32,
	0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43,
	0x73, 0x6d, 0x61, 0x63, 0x64, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x73, 0x6f, 0x38, 0x38,
	0x30, 0x32, 0x33, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x69,
	0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x34, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x73, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x73, 0x6f, 0x38,
	0x38, 0x30, 0x32, 0x36, 0x4d, 0x61, 0x6e, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x4c, 0x61, 0x6e, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x6f,
	0x6e, 0x31, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x6f, 0x6e, 0x38, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x0e, 0x12, 0x08,
	0x0a, 0x04, 0x66, 0x64, 0x64, 0x69, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x70, 0x62,
	0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x64, 0x6c, 0x63, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03,
	0x64, 0x73, 0x31, 0x10, 0x12, 0x12, 0x06, 0x0a, 0x02, 0x65, 0x31, 0x10, 0x13, 0x12, 0x0d, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x53, 0x44, 0x4e, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x53, 0x44, 0x4e, 0x10, 0x15, 0x12, 0x1a, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x70, 0x70,
	0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x6f, 0x6e, 0x10,
	0x19, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x33, 0x4d, 0x62,
	0x69, 0x74, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x73, 0x69, 0x70, 0x10, 0x1b, 0x12, 0x08,
	0x0a, 0x04, 0x73, 0x6c, 0x69, 0x70, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x6c, 0x74, 0x72,
	0x61, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x73, 0x33, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03,
	0x73, 0x69, 0x70, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x73, 0x32, 0x33, 0x32, 0x10, 0x21,
	0x12, 0x08, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x61, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x72,
	0x63, 0x6e, 0x65, 0x74, 0x10, 0x23, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x6e, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x73, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x74, 0x6d, 0x10, 0x25, 0x12,
	0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x6f, 0x78, 0x32, 0x35, 0x10, 0x26, 0x12, 0x09, 0x0a, 0x05, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x78, 0x32, 0x35, 0x70, 0x6c, 0x65,
	0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x32, 0x6c, 0x6c,
	0x63, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x6c, 0x6b,
	0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x6d, 0x64, 0x73, 0x44, 0x78, 0x69, 0x10, 0x2b, 0x12,
	0x15, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x76, 0x33, 0x35, 0x10, 0x2d, 0x12,
	0x08, 0x0a, 0x04, 0x68, 0x73, 0x73, 0x69, 0x10, 0x2e, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x10, 0x2f, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x10, 0x30, 0x12,
	0x08, 0x0a, 0x04, 0x61, 0x61, 0x6c, 0x35, 0x10, 0x31, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x6f, 0x6e,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x10, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x65,
	0x74, 0x56, 0x54, 0x10, 0x33, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x6d, 0x64, 0x73, 0x49, 0x63, 0x69,
	0x70, 0x10, 0x34, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x78, 0x6f, 0x72, 0x10, 0x36, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x65, 0x65,
	0x65, 0x38, 0x30, 0x32, 0x31, 0x32, 0x10, 0x37, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x69, 0x62, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x38, 0x12, 0x12, 0x0a, 0x0e, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x39, 0x12, 0x1a,
	0x0a, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x3a, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x66,
	0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x33, 0x10, 0x3b, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x66,
	0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x35, 0x10, 0x3c, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x63,
	0x74, 0x45, 0x6d, 0x75, 0x6c, 0x10, 0x3d, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x10, 0x3e, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x73, 0x64, 0x6e, 0x10, 0x3f,
	0x12, 0x07, 0x0a, 0x03, 0x76, 0x31, 0x31, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x76, 0x33, 0x36,
	0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x36, 0x34, 0x6b, 0x10,
	0x42, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x32, 0x6d, 0x62, 0x10, 0x43,
	0x12, 0x08, 0x0a, 0x04, 0x71, 0x6c, 0x6c, 0x63, 0x10, 0x44, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x61,
	0x73, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x46, 0x58, 0x10, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x46, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x65, 0x65, 0x65,
	0x38, 0x30, 0x32, 0x31, 0x31, 0x10, 0x47, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x62, 0x6d, 0x33, 0x37,
	0x30, 0x70, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x10, 0x48, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x73,
	0x63, 0x6f, 0x6e, 0x10, 0x49, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6c, 0x73, 0x77, 0x10, 0x4a, 0x12,
	0x09, 0x0a, 0x05, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x10, 0x4b, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x73,
	0x64, 0x6e, 0x75, 0x10, 0x4c, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x70, 0x64, 0x10, 0x4d, 0x12,
	0x0c, 0x0a, 0x08, 0x69, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0x4e, 0x12, 0x08, 0x0a,
	0x04, 0x72, 0x73, 0x72, 0x62, 0x10, 0x4f, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x74, 0x6d, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x73, 0x30, 0x10, 0x51,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x73, 0x30, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x52, 0x12,
	0x07, 0x0a, 0x03, 0x62, 0x73, 0x63, 0x10, 0x53, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x6e, 0x72, 0x10, 0x55, 0x12, 0x0f, 0x0a, 0x0b,
	0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x44, 0x74, 0x72, 0x10, 0x56, 0x12, 0x09, 0x0a,
	0x05, 0x65, 0x70, 0x6c, 0x72, 0x73, 0x10, 0x57, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x72, 0x61, 0x70,
	0x10, 0x58, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x6c, 0x73, 0x10, 0x59,
	0x12, 0x0b, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x64, 0x10, 0x5a, 0x12, 0x0b, 0x0a,
	0x07, 0x74, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x64, 0x10, 0x5b, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x50, 0x49, 0x10, 0x5c, 0x12, 0x08, 0x0a,
	0x04, 0x78, 0x32, 0x31, 0x33, 0x10, 0x5d, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x64, 0x73, 0x6c, 0x10,
	0x5e, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x73, 0x6c, 0x10, 0x5f, 0x12, 0x08, 0x0a, 0x04,
	0x73, 0x64, 0x73, 0x6c, 0x10, 0x60, 0x12, 0x08, 0x0a, 0x04, 0x76, 0x64, 0x73, 0x6c, 0x10, 0x61,
	0x12, 0x13, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x43, 0x52, 0x46, 0x50,
	0x49, 0x6e, 0x74, 0x10, 0x62, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x79, 0x72, 0x69, 0x6e, 0x65, 0x74,
	0x10, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x10, 0x64, 0x12,
	0x0c, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x4f, 0x10, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x53, 0x10, 0x66, 0x12, 0x0e, 0x0a, 0x0a, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x10, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x10, 0x68, 0x12, 0x0a, 0x0a, 0x06,
	0x61, 0x74, 0x6d, 0x44, 0x78, 0x69, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x74, 0x6d, 0x46,
	0x75, 0x6e, 0x69, 0x10, 0x6a, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x74, 0x6d, 0x49, 0x6d, 0x61, 0x10,
	0x6b, 0x12, 0x16, 0x0a, 0x12, 0x70, 0x70, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e,
	0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x43, 0x64, 0x6c, 0x63, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x70, 0x4f,
	0x76, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x77, 0x10, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x6f, 0x12, 0x14, 0x0a, 0x10, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x70, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x70, 0x63, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x70,
	0x4f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x6d, 0x10, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x73, 0x6f,
	0x38, 0x38, 0x30, 0x32, 0x35, 0x46, 0x69, 0x62, 0x65, 0x72, 0x10, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x74, 0x64, 0x6c, 0x63, 0x10, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x69, 0x67, 0x61, 0x62, 0x69,
	0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x75, 0x12, 0x08, 0x0a, 0x04, 0x68,
	0x64, 0x6c, 0x63, 0x10, 0x76, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x70, 0x66, 0x10, 0x77, 0x12,
	0x07, 0x0a, 0x03, 0x76, 0x33, 0x37, 0x10, 0x78, 0x12, 0x0a, 0x0a, 0x06, 0x78, 0x32, 0x35, 0x6d,
	0x6c, 0x70, 0x10, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x78, 0x32, 0x35, 0x68, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0x7a, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x48, 0x64, 0x6c, 0x63, 0x10, 0x7b, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x10, 0x7c, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74, 0x10, 0x7d,
	0x12, 0x06, 0x0a, 0x02, 0x69, 0x70, 0x10, 0x7e, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x73,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x7f, 0x12,
	0x18, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x80, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x64, 0x6f, 0x63,
	0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x81,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x61, 0x31, 0x32, 0x4d, 0x70, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x10, 0x82, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x83,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x10, 0x84, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x63, 0x65, 0x73, 0x10, 0x85, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x61, 0x74, 0x6d, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x86, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x6c, 0x32, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x87, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x6c,
	0x33, 0x69, 0x70, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x88, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x6c, 0x33,
	0x69, 0x70, 0x78, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x89, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x8a,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x61, 0x69, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x49, 0x70, 0x10, 0x8b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x64, 0x74, 0x6d, 0x10, 0x8c,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x64, 0x63, 0x6e, 0x10, 0x8d, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x69,
	0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x8e, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x6d,
	0x73, 0x64, 0x73, 0x6c, 0x10, 0x8f, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x69, 0x65, 0x65, 0x65, 0x31,
	0x33, 0x39, 0x34, 0x10, 0x90, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x69, 0x66, 0x5f, 0x67, 0x73, 0x6e,
	0x10, 0x91, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x4d, 0x61, 0x63,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x92, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x64, 0x76, 0x62, 0x52,
	0x63, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x93, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x10, 0x94, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x74, 0x6d, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x10, 0x95, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0x96, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x73, 0x72, 0x70, 0x10, 0x97, 0x01,
	0x12, 0x11, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x6d,
	0x10, 0x98, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x99, 0x01, 0x12, 0x09, 0x0a,
	0x04, 0x69, 0x64, 0x73, 0x6c, 0x10, 0x9a, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x9b, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x73, 0x73, 0x37, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x9c, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x32, 0x50,
	0x10, 0x9d, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x66, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x10, 0x9e, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x72, 0x66, 0x63, 0x31, 0x34, 0x38, 0x33, 0x10, 0x9f,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x75, 0x73, 0x62, 0x10, 0xa0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x69,
	0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x10, 0xa1, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xa2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x66, 0x72, 0x66,
	0x31, 0x36, 0x4d, 0x66, 0x72, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0xa3, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x68, 0x33, 0x32, 0x33, 0x47, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x10, 0xa4, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x68, 0x33, 0x32, 0x33, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x10, 0xa5, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x10, 0xa6, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x6d, 0x66, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xa7, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x68, 0x64, 0x73, 0x6c, 0x32, 0x10, 0xa8, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x73, 0x68,
	0x64, 0x73, 0x6c, 0x10, 0xa9, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x64, 0x73, 0x31, 0x46, 0x44, 0x4c,
	0x10, 0xaa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x10, 0xab, 0x01, 0x12, 0x0d, 0x0a,
	0x08, 0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x49, 0x6e, 0x10, 0xac, 0x01, 0x12, 0x0e, 0x0a, 0x09,
	0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x4f, 0x75, 0x74, 0x10, 0xad, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x70, 0x6c, 0x63, 0x10, 0xae, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x6e, 0x66, 0x61, 0x73, 0x10, 0xaf,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x74, 0x72, 0x30, 0x30, 0x38, 0x10, 0xb0, 0x01, 0x12, 0x0d, 0x0a,
	0x08, 0x67, 0x72, 0x33, 0x30, 0x33, 0x52, 0x44, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x67, 0x72, 0x33, 0x30, 0x33, 0x49, 0x44, 0x54, 0x10, 0xb2, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x69,
	0x73, 0x75, 0x70, 0x10, 0xb3, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f,
	0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x10, 0xb4, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f, 0x63,
	0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x10, 0xb5, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x44, 0x6f,
	0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x10, 0xb6, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x68, 0x69, 0x70, 0x65, 0x72, 0x6c, 0x61,
	0x6e, 0x32, 0x10, 0xb7, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x57, 0x41,
	0x70, 0x32, 0x4d, 0x70, 0x10, 0xb8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x73, 0x6f, 0x6e, 0x65, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10,
	0xb9, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0xba, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x61, 0x61, 0x6c, 0x32, 0x10, 0xbb,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x41, 0x43, 0x10, 0xbc, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x61, 0x74, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10, 0xbd, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x69, 0x6d, 0x74, 0x10, 0xbe, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x6d, 0x76, 0x6c,
	0x10, 0xbf, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x68, 0x44, 0x53, 0x4c, 0x10,
	0xc0, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x66, 0x72, 0x44, 0x6c, 0x63, 0x69, 0x45, 0x6e, 0x64, 0x50,
	0x74, 0x10, 0xc1, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x61, 0x74, 0x6d, 0x56, 0x63, 0x69, 0x45, 0x6e,
	0x64, 0x50, 0x74, 0x10, 0xc2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xc3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0xc4, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x6d, 0x10, 0xc5, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0xc6, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x62,
	0x61, 0x6e, 0x64, 0x10, 0xc7, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x10, 0xc8, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x71, 0x32, 0x39, 0x33, 0x31, 0x10, 0xc9, 0x01, 0x12,
	0x0e, 0x0a, 0x09, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x67, 0x10, 0xca, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x73, 0x69, 0x70, 0x54, 0x67, 0x10, 0xcb, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x73,
	0x69, 0x70, 0x53, 0x69, 0x67, 0x10, 0xcc, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x64, 0x6f, 0x63, 0x73,
	0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xcd, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x65, 0x63, 0x6f, 0x6e, 0x65,
	0x74, 0x10, 0xce, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x70, 0x6f, 0x6e, 0x31, 0x35, 0x35, 0x10, 0xcf,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x70, 0x6f, 0x6e, 0x36, 0x32, 0x32, 0x10, 0xd0, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0xd1, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xd2, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x46, 0x47, 0x44, 0x10, 0xd3, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44, 0x45, 0x41, 0x4e, 0x41, 0x10, 0xd4, 0x01, 0x12,
	0x0d, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x49, 0x44, 0x10, 0xd5, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x6d, 0x70, 0x65, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x10,
	0xd6, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x73, 0x69, 0x78, 0x54, 0x6f, 0x46, 0x6f, 0x75, 0x72, 0x10,
	0xd7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x67, 0x74, 0x70, 0x10, 0xd8, 0x01, 0x12, 0x12, 0x0a, 0x0d,
	0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x31, 0x10, 0xd9, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70,
	0x32, 0x10, 0xda, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xdb, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x6e, 0x61, 0x10, 0xdc, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x67, 0x66, 0x70, 0x10, 0xdd, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x49,
	0x53, 0x4c, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0xde, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x61, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0xdf, 0x01, 0x12,
	0x0d, 0x0a, 0x08, 0x66, 0x63, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xe0, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x72, 0x70, 0x72, 0x10, 0xe1, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x71, 0x61, 0x6d, 0x10,
	0xe2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x6c, 0x6d, 0x70, 0x10, 0xe3, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x63, 0x62, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72, 0x10, 0xe4, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x43, 0x6d, 0x74,
	0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xe5, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x61, 0x64, 0x73, 0x6c, 0x32, 0x10, 0xe6, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x6d, 0x61,
	0x63, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46,
	0x10, 0xe7, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x55, 0x6e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46, 0x10, 0xe8, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x61, 0x76, 0x69, 0x63, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x10, 0xe9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x61, 0x74, 0x6d, 0x62, 0x6f, 0x6e,
	0x64, 0x10, 0xea, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44,
	0x4f, 0x53, 0x10, 0xeb, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x6d, 0x6f, 0x63, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x31, 0x10, 0xec, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x69, 0x65, 0x65, 0x65,
	0x38, 0x30, 0x32, 0x31, 0x36, 0x57, 0x4d, 0x41, 0x4e, 0x10, 0xed, 0x01, 0x12, 0x0e, 0x0a, 0x09,
	0x61, 0x64, 0x73, 0x6c, 0x32, 0x70, 0x6c, 0x75, 0x73, 0x10, 0xee, 0x01, 0x12, 0x13, 0x0a, 0x0e,
	0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xef,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x64, 0x76, 0x62, 0x54, 0x64, 0x6d, 0x10, 0xf0, 0x01, 0x12, 0x0f,
	0x0a, 0x0a, 0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x54, 0x64, 0x6d, 0x61, 0x10, 0xf1, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x78, 0x38, 0x36, 0x4c, 0x61, 0x70, 0x73, 0x10, 0xf2, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x10, 0xf3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x77, 0x77,
	0x61, 0x6e, 0x50, 0x50, 0x32, 0x10, 0xf4, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x42, 0x53, 0x10, 0xf5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x69, 0x66, 0x50, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xf6, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x69, 0x6c, 0x61, 0x6e, 0x10, 0xf7,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x70, 0x69, 0x70, 0x10, 0xf8, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x61,
	0x6c, 0x75, 0x45, 0x4c, 0x50, 0x10, 0xf9, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x67, 0x70, 0x6f, 0x6e,
	0x10, 0xfa, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x76, 0x64, 0x73, 0x6c, 0x32, 0x10, 0xfb, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0xfc, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x77,
	0x61, 0x70, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x42, 0x73, 0x73, 0x10, 0xfd, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x57, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10, 0xfe, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x62, 0x69, 0x74,
	0x73, 0x10, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x10,
	0x80, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x81, 0x02, 0x12, 0x15,
	0x0a, 0x10, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e,
	0x69, 0x63, 0x10, 0x82, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32,
	0x31, 0x35, 0x34, 0x10, 0x83, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x64, 0x75,
	0x10, 0x84, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x74, 0x75, 0x10, 0x85, 0x02,
	0x12, 0x0e, 0x0a, 0x09, 0x69, 0x66, 0x56, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x10, 0x86, 0x02,
	0x12, 0x0a, 0x0a, 0x05, 0x67, 0x39, 0x39, 0x38, 0x31, 0x10, 0x87, 0x02, 0x12, 0x0a, 0x0a, 0x05,
	0x67, 0x39, 0x39, 0x38, 0x32, 0x10, 0x88, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x67, 0x39, 0x39, 0x38,
	0x33, 0x10, 0x89, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x10,
	0x8a, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4f, 0x6e, 0x75,
	0x10, 0x8b, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x10, 0x8c, 0x02, 0x12, 0x17, 0x0a, 0x12,
	0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x10, 0x8d, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f, 0x6e,
	0x4f, 0x6e, 0x75, 0x10, 0x8e, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x61, 0x6c, 0x75, 0x47, 0x70, 0x6f,
	0x6e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x10, 0x8f, 0x02, 0x12,
	0x12, 0x0a, 0x0d, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x69, 0x63, 0x54, 0x65, 0x61, 0x6d,
	0x10, 0x90, 0x02, 0x22, 0x70, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a,
	0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x10, 0x07, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe2, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0xcb, 0x04,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x64, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x64, 0x64, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x72, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x61, 0x0a, 0x08, 0x4d,
	0x41, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xb3,
	0x01, 0x0a, 0x09, 0x44, 0x48, 0x43, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x17, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0f,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x03, 0x0a, 0x0d, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x11,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x41, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x68,
	0x63, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x6f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d,
	0x73, 0x77, 0x70, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_proto_rawDescOnce sync.Once
	file_device_proto_rawDescData = file_device_proto_rawDesc
)

func file_device_proto_rawDescGZIP() []byte {
	file_device_proto_rawDescOnce.Do(func() {
		file_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_proto_rawDescData)
	})
	return file_device_proto_rawDescData
}

var file_device_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_device_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_device_proto_goTypes = []interface{}{
	(Device_Type)(0),                // 0: device.Device.Type
	(Device_StackRole)(0),           // 1: device.Device.StackRole
	(Port_Type)(0),                  // 2: device.Port.Type
	(Port_Status)(0),                // 3: device.Port.Status
	(*Device)(nil),                  // 4: device.Device
	(*Port)(nil),                    // 5: device.Port
	(*Neighbor)(nil),                // 6: device.Neighbor
	(*Aggregation)(nil),             // 7: device.Aggregation
	(*Transceivers)(nil),            // 8: device.Transceivers
	(*Transceiver)(nil),             // 9: device.Transceiver
	(*MACEntry)(nil),                // 10: device.MACEntry
	(*DHCPEntry)(nil),               // 11: device.DHCPEntry
	(*PhysicalPortInformation)(nil), // 12: device.PhysicalPortInformation
	(*PortIndexEntity)(nil),         // 13: device.PortIndexEntity
	(*PortIndex)(nil),               // 14: device.PortIndex
	(*PortSignature)(nil),           // 15: device.PortSignature
	(*Device_Slot)(nil),             // 16: device.Device.Slot
	(*Device_Module)(nil),           // 17: device.Device.Module
	(*Port_Statistics)(nil),         // 18: device.Port.Statistics
	(*Port_Statistics_Metrics)(nil), // 19: device.Port.Statistics.Metrics
	(*Transceiver_Statistics)(nil),  // 20: device.Transceiver.Statistics
	nil,                             // 21: device.PortIndex.PortsEntry
	(*timestamppb.Timestamp)(nil),   // 22: google.protobuf.Timestamp
	(*trafficpolicypb.ConfiguredTrafficPolicy)(nil), // 23: traffic_policy.ConfiguredTrafficPolicy
	(*trafficpolicypb.QOS)(nil),                     // 24: traffic_policy.QOS
}
var file_device_proto_depIdxs = []int32{
	0,  // 0: device.Device.type:type_name -> device.Device.Type
	16, // 1: device.Device.slots:type_name -> device.Device.Slot
	17, // 2: device.Device.modules:type_name -> device.Device.Module
	5,  // 3: device.Device.ports:type_name -> device.Port
	7,  // 4: device.Device.aggregated_ports:type_name -> device.Aggregation
	1,  // 5: device.Device.stack_role:type_name -> device.Device.StackRole
	2,  // 6: device.Port.type:type_name -> device.Port.Type
	3,  // 7: device.Port.admin_status:type_name -> device.Port.Status
	3,  // 8: device.Port.operational_status:type_name -> device.Port.Status
	22, // 9: device.Port.last_changed:type_name -> google.protobuf.Timestamp
	18, // 10: device.Port.stats:type_name -> device.Port.Statistics
	9,  // 11: device.Port.transceiver:type_name -> device.Transceiver
	6,  // 12: device.Port.neighbor:type_name -> device.Neighbor
	10, // 13: device.Port.mac_address_table:type_name -> device.MACEntry
	11, // 14: device.Port.dhcp_table:type_name -> device.DHCPEntry
	23, // 15: device.Port.configuredTrafficPolicy:type_name -> traffic_policy.ConfiguredTrafficPolicy
	24, // 16: device.Port.qos:type_name -> traffic_policy.QOS
	22, // 17: device.Aggregation.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 18: device.Aggregation.ports:type_name -> device.Port
	9,  // 19: device.Transceivers.transceivers:type_name -> device.Transceiver
	20, // 20: device.Transceiver.stats:type_name -> device.Transceiver.Statistics
	22, // 21: device.DHCPEntry.lease:type_name -> google.protobuf.Timestamp
	21, // 22: device.PortIndex.ports:type_name -> device.PortIndex.PortsEntry
	3,  // 23: device.PortSignature.admin_status:type_name -> device.Port.Status
	3,  // 24: device.PortSignature.operational_status:type_name -> device.Port.Status
	22, // 25: device.PortSignature.last_changed:type_name -> google.protobuf.Timestamp
	10, // 26: device.PortSignature.mac_address_table:type_name -> device.MACEntry
	11, // 27: device.PortSignature.dhcp_table:type_name -> device.DHCPEntry
	4,  // 28: device.Device.Slot.device:type_name -> device.Device
	4,  // 29: device.Device.Module.device:type_name -> device.Device
	19, // 30: device.Port.Statistics.input:type_name -> device.Port.Statistics.Metrics
	19, // 31: device.Port.Statistics.output:type_name -> device.Port.Statistics.Metrics
	22, // 32: device.Transceiver.Statistics.timestamp:type_name -> google.protobuf.Timestamp
	13, // 33: device.PortIndex.PortsEntry.value:type_name -> device.PortIndexEntity
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_device_proto_init() }
func file_device_proto_init() {
	if File_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transceivers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MACEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalPortInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortIndexEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port_Statistics_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transceiver_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_device_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_proto_goTypes,
		DependencyIndexes: file_device_proto_depIdxs,
		EnumInfos:         file_device_proto_enumTypes,
		MessageInfos:      file_device_proto_msgTypes,
	}.Build()
	File_device_proto = out.File
	file_device_proto_rawDesc = nil
	file_device_proto_goTypes = nil
	file_device_proto_depIdxs = nil
}
