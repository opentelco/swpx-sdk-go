//
// File: analysis.proto
// Project: src
// File Created: Sunday, 14th February 2021 1:47:04 pm
// Author: Mathias Ehrlin (mathias.ehrlin@vx.se)
// -----
// Last Modified: Sunday, 14th February 2021 1:56:06 pm
// Modified By: Mathias Ehrlin (mathias.ehrlin@vx.se>)
// -----
// Copyright - 2021 VX Service Delivery AB
//
// Unauthorized copying of this file, via any medium is strictly prohibited
// Proprietary and confidential
// -----

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: analysis.proto

package analysispb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Report_Status int32

const (
	Report_STATUS_NOT_SET    Report_Status = 0
	Report_STATUS_RUNNING    Report_Status = 1
	Report_STATUS_COMPLETED  Report_Status = 2
	Report_STATUS_FAILED     Report_Status = 3
	Report_STATUS_CANCELED   Report_Status = 4
	Report_STATUS_TERMINATED Report_Status = 5
)

// Enum value maps for Report_Status.
var (
	Report_Status_name = map[int32]string{
		0: "STATUS_NOT_SET",
		1: "STATUS_RUNNING",
		2: "STATUS_COMPLETED",
		3: "STATUS_FAILED",
		4: "STATUS_CANCELED",
		5: "STATUS_TERMINATED",
	}
	Report_Status_value = map[string]int32{
		"STATUS_NOT_SET":    0,
		"STATUS_RUNNING":    1,
		"STATUS_COMPLETED":  2,
		"STATUS_FAILED":     3,
		"STATUS_CANCELED":   4,
		"STATUS_TERMINATED": 5,
	}
)

func (x Report_Status) Enum() *Report_Status {
	p := new(Report_Status)
	*p = x
	return p
}

func (x Report_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[0].Descriptor()
}

func (Report_Status) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[0]
}

func (x Report_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Status.Descriptor instead.
func (Report_Status) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0, 0}
}

// the different types of the report
type Report_Type int32

const (
	// the type is not set
	Report_TYPE_NOT_SET Report_Type = 0
	// the type is quick, the analysis is done in a short time aprox 5-10 seconds
	Report_TYPE_QUICK Report_Type = 1
	// the type is detailed, the analysis is done in a longer time aprox 40-60 seconds
	Report_TYPE_DETAILED Report_Type = 2
)

// Enum value maps for Report_Type.
var (
	Report_Type_name = map[int32]string{
		0: "TYPE_NOT_SET",
		1: "TYPE_QUICK",
		2: "TYPE_DETAILED",
	}
	Report_Type_value = map[string]int32{
		"TYPE_NOT_SET":  0,
		"TYPE_QUICK":    1,
		"TYPE_DETAILED": 2,
	}
)

func (x Report_Type) Enum() *Report_Type {
	p := new(Report_Type)
	*p = x
	return p
}

func (x Report_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[1].Descriptor()
}

func (Report_Type) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[1]
}

func (x Report_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Type.Descriptor instead.
func (Report_Type) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0, 1}
}

type Report_NetworkStatus int32

const (
	Report_NETWORK_STATUS_NOT_SET Report_NetworkStatus = 0
	// All anaylsis looks OK, nothing stands out as a problem atm.
	Report_NETWORK_STATUS_OK Report_NetworkStatus = 1
	// The network is degraded, some analysis looks bad but not all.
	// check the details to see what is wrong.
	Report_NETWORK_STATUS_DEGRADED Report_NetworkStatus = 2
	// The network is in a bad state, most of the analysis looks bad.
	// Check the details to see what is wrong.
	Report_NETWORK_STATUS_ERROR Report_NetworkStatus = 3
)

// Enum value maps for Report_NetworkStatus.
var (
	Report_NetworkStatus_name = map[int32]string{
		0: "NETWORK_STATUS_NOT_SET",
		1: "NETWORK_STATUS_OK",
		2: "NETWORK_STATUS_DEGRADED",
		3: "NETWORK_STATUS_ERROR",
	}
	Report_NetworkStatus_value = map[string]int32{
		"NETWORK_STATUS_NOT_SET":  0,
		"NETWORK_STATUS_OK":       1,
		"NETWORK_STATUS_DEGRADED": 2,
		"NETWORK_STATUS_ERROR":    3,
	}
)

func (x Report_NetworkStatus) Enum() *Report_NetworkStatus {
	p := new(Report_NetworkStatus)
	*p = x
	return p
}

func (x Report_NetworkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_NetworkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[2].Descriptor()
}

func (Report_NetworkStatus) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[2]
}

func (x Report_NetworkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_NetworkStatus.Descriptor instead.
func (Report_NetworkStatus) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0, 2}
}

type Report_State_State int32

const (
	// invalid state
	Report_State_STATE_NOT_SET Report_State_State = 0
	// the setup state, the report is being setup
	Report_State_STATE_SETUP Report_State_State = 1
	// the collecting data phase, the report is collecting data from the network
	// a report can enter this state several times if collecting data is done several times.
	Report_State_STATE_COLLECTING_DATA Report_State_State = 2
	// the analysing data state, the report is analysing the collected data
	Report_State_STATE_ANALYSING_DATA Report_State_State = 3
	// the ai processing state, the report is being analysed by the virtual network engineer
	Report_State_STATE_AI_PROCESSING Report_State_State = 4
)

// Enum value maps for Report_State_State.
var (
	Report_State_State_name = map[int32]string{
		0: "STATE_NOT_SET",
		1: "STATE_SETUP",
		2: "STATE_COLLECTING_DATA",
		3: "STATE_ANALYSING_DATA",
		4: "STATE_AI_PROCESSING",
	}
	Report_State_State_value = map[string]int32{
		"STATE_NOT_SET":         0,
		"STATE_SETUP":           1,
		"STATE_COLLECTING_DATA": 2,
		"STATE_ANALYSING_DATA":  3,
		"STATE_AI_PROCESSING":   4,
	}
)

func (x Report_State_State) Enum() *Report_State_State {
	p := new(Report_State_State)
	*p = x
	return p
}

func (x Report_State_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_State_State) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[3].Descriptor()
}

func (Report_State_State) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[3]
}

func (x Report_State_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_State_State.Descriptor instead.
func (Report_State_State) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Analysis_Type int32

const (
	Analysis_TYPE_NOT_SET Analysis_Type = 0
	// analysis of the link state on the port
	Analysis_TYPE_LINK Analysis_Type = 1
	// analysis of the link crc error counter on the port
	// if the port has crc errors during the analysis
	Analysis_TYPE_LINK_CRC_ERROR Analysis_Type = 2
	// Analysis of the link error counter on the port
	// the number of packets that could not be transmitted because of errors
	Analysis_TYPE_LINK_ERROR Analysis_Type = 3
	// analysis of the transceiver diagnostics on the port
	// RX/TX power, temperature, voltage, bias current etc.
	// Analyze of the Interface.Transceiver.Stats
	Analysis_TYPE_TRANSCEIVER_DIAGNOSTICS Analysis_Type = 4
	// analysis of the traffic on the port
	// if the port has traffic during the analysis
	Analysis_TYPE_TRAFFIC Analysis_Type = 5
	// analysis of the mac address learned by mac learning
	// some devices will inhert the mac address from the dhcp snooping and vice versa
	Analysis_TYPE_MAC_ADDRESS Analysis_Type = 6
	// analysis of the dhcp snooping lease table
	Analysis_TYPE_DHCP_LEASE Analysis_Type = 7
)

// Enum value maps for Analysis_Type.
var (
	Analysis_Type_name = map[int32]string{
		0: "TYPE_NOT_SET",
		1: "TYPE_LINK",
		2: "TYPE_LINK_CRC_ERROR",
		3: "TYPE_LINK_ERROR",
		4: "TYPE_TRANSCEIVER_DIAGNOSTICS",
		5: "TYPE_TRAFFIC",
		6: "TYPE_MAC_ADDRESS",
		7: "TYPE_DHCP_LEASE",
	}
	Analysis_Type_value = map[string]int32{
		"TYPE_NOT_SET":                 0,
		"TYPE_LINK":                    1,
		"TYPE_LINK_CRC_ERROR":          2,
		"TYPE_LINK_ERROR":              3,
		"TYPE_TRANSCEIVER_DIAGNOSTICS": 4,
		"TYPE_TRAFFIC":                 5,
		"TYPE_MAC_ADDRESS":             6,
		"TYPE_DHCP_LEASE":              7,
	}
)

func (x Analysis_Type) Enum() *Analysis_Type {
	p := new(Analysis_Type)
	*p = x
	return p
}

func (x Analysis_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Analysis_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[4].Descriptor()
}

func (Analysis_Type) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[4]
}

func (x Analysis_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Analysis_Type.Descriptor instead.
func (Analysis_Type) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{2, 0}
}

type Analysis_Result int32

const (
	Analysis_RESULT_NOT_SET Analysis_Result = 0
	// Something is wrong with the analysed access (switch and port)
	// either the end customer needs to make some changes or a ticket needs to be created
	// before a ticket is created troubleshooting should be done by the end customer
	Analysis_RESULT_ERROR Analysis_Result = 1
	// Something could be wrong with the analysed access (switch and port) but most likely not
	// the result could indicate a problem but the impact is uncertain or low. Creating a trouble ticket
	// is not recommended based on a Warning result
	Analysis_RESULT_WARNING Analysis_Result = 2
	// the analysis is ok, no problem found with the analysed access (switch and port)
	Analysis_RESULT_OK Analysis_Result = 3
)

// Enum value maps for Analysis_Result.
var (
	Analysis_Result_name = map[int32]string{
		0: "RESULT_NOT_SET",
		1: "RESULT_ERROR",
		2: "RESULT_WARNING",
		3: "RESULT_OK",
	}
	Analysis_Result_value = map[string]int32{
		"RESULT_NOT_SET": 0,
		"RESULT_ERROR":   1,
		"RESULT_WARNING": 2,
		"RESULT_OK":      3,
	}
)

func (x Analysis_Result) Enum() *Analysis_Result {
	p := new(Analysis_Result)
	*p = x
	return p
}

func (x Analysis_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Analysis_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[5].Descriptor()
}

func (Analysis_Result) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[5]
}

func (x Analysis_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Analysis_Result.Descriptor instead.
func (Analysis_Result) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{2, 1}
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the report (workflow id)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// the report is the result of the analysis
	Analysis []*Analysis   `protobuf:"bytes,2,rep,name=analysis,proto3" json:"analysis,omitempty" bson:"analysis"`
	Status   Report_Status `protobuf:"varint,3,opt,name=status,proto3,enum=analysis.Report_Status" json:"status,omitempty" bson:"status"`
	// started is the time when the report was started
	Started *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty" bson:"started"`
	// completed is the time when the report was completed
	Completed *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed,proto3" json:"completed,omitempty" bson:"completed"`
	// the report is the result of the analysis
	Error *string `protobuf:"bytes,6,opt,name=error,proto3,oneof" json:"error,omitempty" bson:"error"`
	// type of report, Quick or Detailed
	Type Report_Type `protobuf:"varint,7,opt,name=type,proto3,enum=analysis.Report_Type" json:"type,omitempty" bson:"type"`
	// the fingerprint is the fingerprint used to identify the report
	Fingerprint *string `protobuf:"bytes,8,opt,name=fingerprint,proto3,oneof" json:"fingerprint,omitempty" bson:"fingerprint"`
	// the network status is a summary of the analysis and a quick way to see if the network is ok or not
	NetworkStatus Report_NetworkStatus `protobuf:"varint,9,opt,name=network_status,json=networkStatus,proto3,enum=analysis.Report_NetworkStatus" json:"network_status,omitempty" bson:"network_status"`
	// the current phase of the report
	CurrentState *Report_State `protobuf:"bytes,10,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty" bson:"current_state"`
	// the history of the states, when a state is completed it is added to the history
	StateHistory []*Report_State `protobuf:"bytes,11,rep,name=state_history,json=stateHistory,proto3" json:"state_history,omitempty" bson:"state_history"`
	// if ai is enabled the report will be analysed by the virtual network engineer
	AiAnalysis *AIAnalysisResponse `protobuf:"bytes,12,opt,name=ai_analysis,json=aiAnalysis,proto3,oneof" json:"ai_analysis,omitempty" bson:"ai_analysis"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Report) GetAnalysis() []*Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *Report) GetStatus() Report_Status {
	if x != nil {
		return x.Status
	}
	return Report_STATUS_NOT_SET
}

func (x *Report) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *Report) GetCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *Report) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *Report) GetType() Report_Type {
	if x != nil {
		return x.Type
	}
	return Report_TYPE_NOT_SET
}

func (x *Report) GetFingerprint() string {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return ""
}

func (x *Report) GetNetworkStatus() Report_NetworkStatus {
	if x != nil {
		return x.NetworkStatus
	}
	return Report_NETWORK_STATUS_NOT_SET
}

func (x *Report) GetCurrentState() *Report_State {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *Report) GetStateHistory() []*Report_State {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

func (x *Report) GetAiAnalysis() *AIAnalysisResponse {
	if x != nil {
		return x.AiAnalysis
	}
	return nil
}

type AIAnalysisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if the analysis was successfully executed
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty" bson:"success"`
	// the analysis of the report
	Analysis string `protobuf:"bytes,2,opt,name=analysis,proto3" json:"analysis,omitempty" bson:"analysis"`
	// the recommendation of the report
	Recommendation string `protobuf:"bytes,3,opt,name=recommendation,proto3" json:"recommendation,omitempty" bson:"recommendation"`
	// the conclusion of the report
	Conclusion string `protobuf:"bytes,4,opt,name=conclusion,proto3" json:"conclusion,omitempty" bson:"conclusion"`
}

func (x *AIAnalysisResponse) Reset() {
	*x = AIAnalysisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIAnalysisResponse) ProtoMessage() {}

func (x *AIAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIAnalysisResponse.ProtoReflect.Descriptor instead.
func (*AIAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *AIAnalysisResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AIAnalysisResponse) GetAnalysis() string {
	if x != nil {
		return x.Analysis
	}
	return ""
}

func (x *AIAnalysisResponse) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

func (x *AIAnalysisResponse) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

type Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Analysis_Type `protobuf:"varint,1,opt,name=type,proto3,enum=analysis.Analysis_Type" json:"type,omitempty" bson:"type"`
	// the result of the analysis, if the analysis is ok, warning or error
	Result Analysis_Result `protobuf:"varint,2,opt,name=result,proto3,enum=analysis.Analysis_Result" json:"result,omitempty" bson:"result"`
	// the note is a short description of the analysis, e.g "link was down through out the analysis"
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty" bson:"note"`
	// the value is the values that was analyzed
	Value []string `protobuf:"bytes,4,rep,name=value,proto3" json:"value,omitempty" bson:"value"`
	// threshold is the value that the value is compared to
	Threshold string `protobuf:"bytes,5,opt,name=threshold,proto3" json:"threshold,omitempty" bson:"threshold"`
	// what the analysis is about, why we analyse this etc
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analysis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *Analysis) GetType() Analysis_Type {
	if x != nil {
		return x.Type
	}
	return Analysis_TYPE_NOT_SET
}

func (x *Analysis) GetResult() Analysis_Result {
	if x != nil {
		return x.Result
	}
	return Analysis_RESULT_NOT_SET
}

func (x *Analysis) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Analysis) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Analysis) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

func (x *Analysis) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Report_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the current phase of the report
	State Report_State_State `protobuf:"varint,1,opt,name=state,proto3,enum=analysis.Report_State_State" json:"state,omitempty" bson:"state"`
	// how many times the report will poll the device
	PollTimes *int32 `protobuf:"varint,2,opt,name=poll_times,json=pollTimes,proto3,oneof" json:"poll_times,omitempty" bson:"poll_times"`
	// the current poll number (which poll is running now)
	CurrentPoll *int32 `protobuf:"varint,3,opt,name=current_poll,json=currentPoll,proto3,oneof" json:"current_poll,omitempty" bson:"current_poll"`
	// the note is a short description of the current phase of the report
	Note *string `protobuf:"bytes,4,opt,name=note,proto3,oneof" json:"note,omitempty" bson:"note"`
	// the time when the phase started
	Started *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started,proto3" json:"started,omitempty" bson:"started"`
	// the time when the phase ended
	Ended *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ended,proto3" json:"ended,omitempty" bson:"ended"`
}

func (x *Report_State) Reset() {
	*x = Report_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analysis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_State) ProtoMessage() {}

func (x *Report_State) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_State.ProtoReflect.Descriptor instead.
func (*Report_State) Descriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Report_State) GetState() Report_State_State {
	if x != nil {
		return x.State
	}
	return Report_State_STATE_NOT_SET
}

func (x *Report_State) GetPollTimes() int32 {
	if x != nil && x.PollTimes != nil {
		return *x.PollTimes
	}
	return 0
}

func (x *Report_State) GetCurrentPoll() int32 {
	if x != nil && x.CurrentPoll != nil {
		return *x.CurrentPoll
	}
	return 0
}

func (x *Report_State) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

func (x *Report_State) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *Report_State) GetEnded() *timestamppb.Timestamp {
	if x != nil {
		return x.Ended
	}
	return nil
}

var File_analysis_proto protoreflect.FileDescriptor

var file_analysis_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x0a, 0x0a, 0x06,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x69, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x49, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x69, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xac, 0x03, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x49, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x22, 0x3b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x79, 0x0a,
	0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x69, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x41, 0x49, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x03, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x06,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x10, 0x07, 0x22, 0x51, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x03, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x6f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x73,
	0x77, 0x70, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analysis_proto_rawDescOnce sync.Once
	file_analysis_proto_rawDescData = file_analysis_proto_rawDesc
)

func file_analysis_proto_rawDescGZIP() []byte {
	file_analysis_proto_rawDescOnce.Do(func() {
		file_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_analysis_proto_rawDescData)
	})
	return file_analysis_proto_rawDescData
}

var file_analysis_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_analysis_proto_goTypes = []interface{}{
	(Report_Status)(0),            // 0: analysis.Report.Status
	(Report_Type)(0),              // 1: analysis.Report.Type
	(Report_NetworkStatus)(0),     // 2: analysis.Report.NetworkStatus
	(Report_State_State)(0),       // 3: analysis.Report.State.State
	(Analysis_Type)(0),            // 4: analysis.Analysis.Type
	(Analysis_Result)(0),          // 5: analysis.Analysis.Result
	(*Report)(nil),                // 6: analysis.Report
	(*AIAnalysisResponse)(nil),    // 7: analysis.AIAnalysisResponse
	(*Analysis)(nil),              // 8: analysis.Analysis
	(*Report_State)(nil),          // 9: analysis.Report.State
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_analysis_proto_depIdxs = []int32{
	8,  // 0: analysis.Report.analysis:type_name -> analysis.Analysis
	0,  // 1: analysis.Report.status:type_name -> analysis.Report.Status
	10, // 2: analysis.Report.started:type_name -> google.protobuf.Timestamp
	10, // 3: analysis.Report.completed:type_name -> google.protobuf.Timestamp
	1,  // 4: analysis.Report.type:type_name -> analysis.Report.Type
	2,  // 5: analysis.Report.network_status:type_name -> analysis.Report.NetworkStatus
	9,  // 6: analysis.Report.current_state:type_name -> analysis.Report.State
	9,  // 7: analysis.Report.state_history:type_name -> analysis.Report.State
	7,  // 8: analysis.Report.ai_analysis:type_name -> analysis.AIAnalysisResponse
	4,  // 9: analysis.Analysis.type:type_name -> analysis.Analysis.Type
	5,  // 10: analysis.Analysis.result:type_name -> analysis.Analysis.Result
	3,  // 11: analysis.Report.State.state:type_name -> analysis.Report.State.State
	10, // 12: analysis.Report.State.started:type_name -> google.protobuf.Timestamp
	10, // 13: analysis.Report.State.ended:type_name -> google.protobuf.Timestamp
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_analysis_proto_init() }
func file_analysis_proto_init() {
	if File_analysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIAnalysisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analysis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analysis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analysis_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_analysis_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analysis_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_analysis_proto_goTypes,
		DependencyIndexes: file_analysis_proto_depIdxs,
		EnumInfos:         file_analysis_proto_enumTypes,
		MessageInfos:      file_analysis_proto_msgTypes,
	}.Build()
	File_analysis_proto = out.File
	file_analysis_proto_rawDesc = nil
	file_analysis_proto_goTypes = nil
	file_analysis_proto_depIdxs = nil
}
